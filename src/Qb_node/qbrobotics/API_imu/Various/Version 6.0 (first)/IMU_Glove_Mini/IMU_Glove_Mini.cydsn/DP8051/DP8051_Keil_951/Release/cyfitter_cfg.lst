C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Release\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(N
                    -DEBUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Release/cyfitter_cfg.lst) CD OT(8,SIZE) DF(CYAPP_ECC_OFFSET=1216) OJ(.\DP8051\D
                    -P8051_Keil_951\Release\cyfitter_cfg.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * File Name: cyfitter_cfg.c
   3          * 
   4          * PSoC Creator  3.3 SP1
   5          *
   6          * Description:
   7          * This file contains device initialization code.
   8          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
   9          * This file is automatically generated by PSoC Creator.
  10          *
  11          ********************************************************************************
  12          * Copyright (c) 2007-2015 Cypress Semiconductor.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include <string.h>
  19          #include "cytypes.h"
  20          #include "cydevice_trm.h"
  21          #include "cyfitter.h"
  22          #include "CyLib.h"
  23          #include "cyfitter_cfg.h"
  24          
  25          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  26          
  27          
  28          #if defined(__C51__) || defined(__CX51__)
  29                  #define CYPACKED
  30                  #define CYPACKED_ATTR
  31                  #define CYALIGNED
  32                  
  33              #define CY_CFG_UNUSED
  34                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  35          
  36          
  37          
  38                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  39                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  40                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  41          #else
                      #error Unsupported toolchain
              #endif
  44          
  45          
  46          
  47          /* Clock startup error codes                                                   */
  48          #define CYCLOCKSTART_NO_ERROR    0u
  49          #define CYCLOCKSTART_XTAL_ERROR  1u
  50          #define CYCLOCKSTART_32KHZ_ERROR 2u
  51          #define CYCLOCKSTART_PLL_ERROR   3u
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 2   

  52          
  53          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  54          /*******************************************************************************
  55          * Function Name: CyClockStartupError
  56          ********************************************************************************
  57          * Summary:
  58          *  If an error is encountered during clock configuration (crystal startup error,
  59          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  60          *  the customer, this function will stop in an infinite loop.
  61          *
  62          * Parameters:
  63          *   void
  64          *
  65          * Return:
  66          *   void
  67          *
  68          *******************************************************************************/
  69          CY_CFG_UNUSED
  70          static void CyClockStartupError(uint8 errorCode);
  71          CY_CFG_UNUSED
  72          static void CyClockStartupError(uint8 errorCode)
  73          {
  74   1          /* To remove the compiler warning if errorCode not used.                */
  75   1          errorCode = errorCode;
  76   1      
  77   1          /* `#START CyClockStartupError` */
  78   1      
  79   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  80   1          /* we will end up here to allow the customer to implement something to  */
  81   1          /* deal with the clock condition.                                       */
  82   1      
  83   1          /* `#END` */
  84   1      
  85   1          /* If nothing else, stop here since the clocks have not started         */
  86   1          /* correctly.                                                           */
  87   1          while(1) {}
  88   1      }
  89          #endif
  90          
  91          #define cfg_byte_table ((const void CYFAR *)(0x080000u + CYAPP_ECC_OFFSET))
  92          /* UDB_1_4_1_CONFIG Address: CYDEV_UCFG_B0_P1_U0_BASE Size (bytes): 128 */
  93          #define BS_UDB_1_4_1_CONFIG_VAL ((const uint8 CYFAR *)(0x00080720u + CYAPP_ECC_OFFSET))
  94          
  95          /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
  96          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)(0x000807A0u + CYAPP_ECC_OFFSET))
  97          
  98          /* IOPINS0_7 Address: CYREG_PRT12_DM0 Size (bytes): 8 */
  99          #define BS_IOPINS0_7_VAL ((const uint8 CYFAR *)(0x000807A8u + CYAPP_ECC_OFFSET))
 100          
 101          /* IOPINS0_8 Address: CYREG_PRT15_DM0 Size (bytes): 8 */
 102          #define BS_IOPINS0_8_VAL ((const uint8 CYFAR *)(0x000807B0u + CYAPP_ECC_OFFSET))
 103          
 104          /* IOPINS0_1 Address: CYREG_PRT1_DR Size (bytes): 10 */
 105          #define BS_IOPINS0_1_VAL ((const uint8 CYFAR *)(0x000807B8u + CYAPP_ECC_OFFSET))
 106          
 107          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 108          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)(0x000807C4u + CYAPP_ECC_OFFSET))
 109          
 110          /* CYDEV_CLKDIST_ACFG0_CFG0 Address: CYREG_CLKDIST_ACFG0_CFG0 Size (bytes): 4 */
 111          #define BS_CYDEV_CLKDIST_ACFG0_CFG0_VAL ((const uint8 CYFAR *)(0x000807CCu + CYAPP_ECC_OFFSET))
 112          
 113          
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 3   

 114          /*******************************************************************************
 115          * Function Name: ClockSetup
 116          ********************************************************************************
 117          *
 118          * Summary:
 119          *  Performs the initialization of all of the clocks in the device based on the
 120          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 121          *  clocks and setting the necessary dividers to produce the desired frequency. 
 122          *
 123          * Parameters:
 124          *  void
 125          *
 126          * Return:
 127          *  void
 128          *
 129          *******************************************************************************/
 130          static void ClockSetup(void);
 131          static void ClockSetup(void)
 132          {
 133   1              uint32 timeout;
 134   1              uint8 pllLock;
 135   1      
 136   1      
 137   1              /* Configure Digital Clocks based on settings from Clock DWR */
 138   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x000Cu);
 139   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x18u);
 140   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG1_CFG0), 0x0000u);
 141   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG1_CFG0 + 0x2u), 0x50u);
 142   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG2_CFG0), 0x0017u);
 143   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG2_CFG0 + 0x2u), 0x18u);
 144   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG3_CFG0), 0x0006u);
 145   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG3_CFG0 + 0x2u), 0x1Bu);
 146   1      
 147   1              /* Configure Analog Clocks based on settings from Clock DWR */
 148   1              CYCONFIGCPY((void CYFAR *)(CYREG_CLKDIST_ACFG0_CFG0), (const void CYFAR *)(BS_CYDEV_CLKDIST_ACFG0_CFG0_VA
             -L), 4u);
 149   1      
 150   1              /* Configure ILO based on settings from Clock DWR */
 151   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x06u);
 152   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 153   1      
 154   1              /* Configure IMO based on settings from Clock DWR */
 155   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x52u);
 156   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_USB)));
 157   1      
 158   1              /* Configure PLL based on settings from Clock DWR */
 159   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0710u);
 160   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 161   1              /* Wait up to 250us for the PLL to lock */
 162   1              pllLock = 0u;
 163   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 164   1              { 
 165   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 166   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 167   2              }
 168   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 169   1              if (timeout == 0u)
 170   1              {
 171   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 172   2              }
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 4   

 173   1      
 174   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 175   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 176   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 177   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 178   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 179   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 180   1      
 181   1              /* Configure USB Clock based on settings from Clock DWR */
 182   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_UCFG), 0x00u);
 183   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 184   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DLY1), 0x04u);
 185   1      
 186   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x0Fu
             -)));
 187   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG1), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG1) | 0x01u
             -)));
 188   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG0), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x80u
             -)));
 189   1      }
 190          
 191          
 192          /* Analog API Functions */
 193          
 194          
 195          /*******************************************************************************
 196          * Function Name: AnalogSetDefault
 197          ********************************************************************************
 198          *
 199          * Summary:
 200          *  Sets up the analog portions of the chip to default values based on chip
 201          *  configuration options from the project.
 202          *
 203          * Parameters:
 204          *  void
 205          *
 206          * Return:
 207          *  void
 208          *
 209          *******************************************************************************/
 210          static void AnalogSetDefault(void);
 211          static void AnalogSetDefault(void)
 212          {
 213   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 214   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 215   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 216   1              CY_SET_REG8((void CYXDATA *)CYREG_DAC1_SW4, 0x01u);
 217   1              CY_SET_REG8((void CYXDATA *)CYREG_DSM0_SW0, 0x02u);
 218   1              CY_SET_REG8((void CYXDATA *)CYREG_BUS_SW0, 0x02u);
 219   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 220   1      }
 221          
 222          
 223          /*******************************************************************************
 224          * Function Name: SetAnalogRoutingPumps
 225          ********************************************************************************
 226          *
 227          * Summary:
 228          * Enables or disables the analog pumps feeding analog routing switches.
 229          * Intended to be called at startup, based on the Vdda system configuration;
 230          * may be called during operation when the user informs us that the Vdda voltage
 231          * crossed the pump threshold.
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 5   

 232          *
 233          * Parameters:
 234          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 235          *
 236          * Return:
 237          *  void
 238          *
 239          *******************************************************************************/
 240          void SetAnalogRoutingPumps(uint8 enabled)
 241          {
 242   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 243   1              if (enabled != 0u)
 244   1              {
 245   2                      regValue |= 0x22u;
 246   2              }
 247   1              else
 248   1              {
 249   2                      regValue &= (uint8)~0x22u;
 250   2              }
 251   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 252   1      }
 253          
 254          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 255          /* This is an implementation detail of the AMux. Code that depends on it may be
 256             incompatible with other versions of PSoC Creator. */
 257          uint8 CYXDATA * const CYCODE AMux_1__addrTable[4] = {
 258                  (uint8 CYXDATA *)CYREG_PRT1_AG, (uint8 CYXDATA *)CYREG_DAC1_SW4, 
 259                  (uint8 CYXDATA *)CYREG_PRT1_AG, (uint8 CYXDATA *)CY_AMUX_UNUSED, 
 260          };
 261          
 262          /* This is an implementation detail of the AMux. Code that depends on it may be
 263             incompatible with other versions of PSoC Creator. */
 264          const uint8 CYCODE AMux_1__maskTable[4] = {
 265                  0x01u, 0x02u, 
 266                  0x02u, 0x00u, 
 267          };
 268          
 269          /*******************************************************************************
 270          * Function Name: AMux_1_Set
 271          ********************************************************************************
 272          * Summary:
 273          *  This function is used to set a particular channel as active on the AMux.
 274          *
 275          * Parameters:  
 276          *   channel - The mux channel input to set as active
 277          *
 278          * Return:
 279          *   void
 280          *
 281          *******************************************************************************/
 282          void AMux_1_Set(uint8 channel)
 283          {
 284   1              if (channel < 2)
 285   1              {
 286   2                      channel += channel;
 287   2                      *AMux_1__addrTable[channel] |= AMux_1__maskTable[channel];
 288   2                      channel++;
 289   2                      *AMux_1__addrTable[channel] |= AMux_1__maskTable[channel];
 290   2              }
 291   1      }
 292          
 293          /*******************************************************************************
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 6   

 294          * Function Name: AMux_1_Unset
 295          ********************************************************************************
 296          * Summary:
 297          *  This function is used to clear a particular channel from being active on the
 298          *  AMux.
 299          *
 300          * Parameters:  
 301          *   channel - The mux channel input to mark inactive
 302          *
 303          * Return:
 304          *   void
 305          *
 306          *******************************************************************************/
 307          void AMux_1_Unset(uint8 channel)
 308          {
 309   1              if (channel < 2)
 310   1              {
 311   2                      channel += channel;
 312   2                      *AMux_1__addrTable[channel] &= (uint8)~AMux_1__maskTable[channel];
 313   2                      channel++;
 314   2                      *AMux_1__addrTable[channel] &= (uint8)~AMux_1__maskTable[channel];
 315   2              }
 316   1      }
 317          
 318          /* This is an implementation detail of the AMux. Code that depends on it may be
 319             incompatible with other versions of PSoC Creator. */
 320          uint8 CYXDATA * const CYCODE ADC_AMux__addrTable[2] = {
 321                  (uint8 CYXDATA *)CYREG_DSM0_SW3, 
 322                  (uint8 CYXDATA *)CY_AMUX_UNUSED, 
 323          };
 324          
 325          /* This is an implementation detail of the AMux. Code that depends on it may be
 326             incompatible with other versions of PSoC Creator. */
 327          const uint8 CYCODE ADC_AMux__maskTable[2] = {
 328                  0x40u, 
 329                  0x00u, 
 330          };
 331          
 332          /*******************************************************************************
 333          * Function Name: ADC_AMux_Set
 334          ********************************************************************************
 335          * Summary:
 336          *  This function is used to set a particular channel as active on the AMux.
 337          *
 338          * Parameters:  
 339          *   channel - The mux channel input to set as active
 340          *
 341          * Return:
 342          *   void
 343          *
 344          *******************************************************************************/
 345          void ADC_AMux_Set(uint8 channel)
 346          {
 347   1              if (channel < 2)
 348   1              {
 349   2                      *ADC_AMux__addrTable[channel] |= ADC_AMux__maskTable[channel];
 350   2              }
 351   1      }
 352          
 353          /*******************************************************************************
 354          * Function Name: ADC_AMux_Unset
 355          ********************************************************************************
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 7   

 356          * Summary:
 357          *  This function is used to clear a particular channel from being active on the
 358          *  AMux.
 359          *
 360          * Parameters:  
 361          *   channel - The mux channel input to mark inactive
 362          *
 363          * Return:
 364          *   void
 365          *
 366          *******************************************************************************/
 367          void ADC_AMux_Unset(uint8 channel)
 368          {
 369   1              if (channel < 2)
 370   1              {
 371   2                      *ADC_AMux__addrTable[channel] &= (uint8)~ADC_AMux__maskTable[channel];
 372   2              }
 373   1      }
 374          
 375          
 376          
 377          /*******************************************************************************
 378          * Function Name: cyfitter_cfg
 379          ********************************************************************************
 380          * Summary:
 381          *  This function is called by the start-up code for the selected device. It
 382          *  performs all of the necessary device configuration based on the design
 383          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 384          *  as Clocks and Pins as well as any component configuration that is necessary.
 385          *
 386          * Parameters:  
 387          *   void
 388          *
 389          * Return:
 390          *   void
 391          *
 392          *******************************************************************************/
 393          
 394          void cyfitter_cfg(void)
 395          {
 396   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 397   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x01u));
 398   1      
 399   1              {
 400   2      
 401   2                      CYPACKED typedef struct {
 402   2                              void CYFAR *address;
 403   2                              uint16 size;
 404   2                      } CYPACKED_ATTR cfg_memset_t;
 405   2      
 406   2      
 407   2                      CYPACKED typedef struct {
 408   2                              void CYFAR *dest;
 409   2                              const void CYFAR *src;
 410   2                              uint16 size;
 411   2                      } CYPACKED_ATTR cfg_memcpy_t;
 412   2      
 413   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 414   2                              /* address, size */
 415   2                              {(void CYFAR *)(CYREG_PRT3_DR), 64u},
 416   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 512u},
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 8   

 417   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P1_U1_BASE), 3456u},
 418   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 419   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 420   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 421   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 422   2                      };
 423   2      
 424   2                      static const cfg_memcpy_t CYCODE cfg_memcpy_list [] = {
 425   2                              /* dest, src, size */
 426   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P1_U0_BASE), BS_UDB_1_4_1_CONFIG_VAL, 128u},
 427   2                      };
 428   2      
 429   2                      uint8 CYDATA i;
 430   2      
 431   2                      /* Zero out critical memory blocks before beginning configuration */
 432   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 433   2                      {
 434   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 435   3                              CYMEMZERO(ms->address, ms->size);
 436   3                      }
 437   2      
 438   2                      /* Copy device configuration data into registers */
 439   2                      for (i = 0u; i < (sizeof(cfg_memcpy_list)/sizeof(cfg_memcpy_list[0])); i++)
 440   2                      {
 441   3                              const cfg_memcpy_t CYCODE * CYDATA mc = &cfg_memcpy_list[i];
 442   3                              void * CYDATA destPtr = mc->dest;
 443   3                              const void * CYDATA srcPtr = mc->src;
 444   3                              uint16 CYDATA numBytes = mc->size;
 445   3                              CYCONFIGCPY(destPtr, srcPtr, numBytes);
 446   3                      }
 447   2      
 448   2                      cfg_write_bytes(cfg_byte_table);
 449   2      
 450   2                      /* Perform normal device configuration. Order is not critical for these items. */
 451   2                      CY_SET_REG8((void CYXDATA *)(CYREG_DSM0_CR3), 0x0Au);
 452   2      
 453   2                      /* Enable digital routing */
 454   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 455   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 456   2      
 457   2                      /* Enable UDB array */
 458   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 459   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 460   2              }
 461   1      
 462   1      
 463   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 464   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DM0), (const void CYFAR *)(BS_IOPINS0_0_VAL), 8u);
 465   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT12_DM0), (const void CYFAR *)(BS_IOPINS0_7_VAL), 8u);
 466   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT15_DM0), (const void CYFAR *)(BS_IOPINS0_8_VAL), 8u);
 467   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT1_DR), (const void CYFAR *)(BS_IOPINS0_1_VAL), 10u);
 468   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 469   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 470   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 471   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 472   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 473   1              {
 474   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 9   

 475   2              }
 476   1      
 477   1      
 478   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 479   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 480   1              /* Setup clocks based on selections from Clock DWR */
 481   1              ClockSetup();
 482   1      
 483   1              /* Perform basic analog initialization to defaults */
 484   1              AnalogSetDefault();
 485   1      
 486   1              /* Configure alternate active mode */
 487   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 488   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 489   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 75
0000         ?C0001:
                                           ; SOURCE LINE # 87
0000 80FE              SJMP    ?C0001
0002 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 138
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7D0C              MOV     R5,#0CH
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 139
000D 904082            MOV     DPTR,#04082H
0010 7418              MOV     A,#018H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
0013 7B00              MOV     R3,#00H
0015 7A40              MOV     R2,#040H
0017 7984              MOV     R1,#084H
0019 E4                CLR     A
001A FD                MOV     R5,A
001B FC                MOV     R4,A
001C 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 141
001F 904086            MOV     DPTR,#04086H
0022 7450              MOV     A,#050H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
0025 7B00              MOV     R3,#00H
0027 7A40              MOV     R2,#040H
0029 7988              MOV     R1,#088H
002B 7D17              MOV     R5,#017H
002D 7C00              MOV     R4,#00H
002F 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 143
0032 90408A            MOV     DPTR,#0408AH
0035 7418              MOV     A,#018H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0038 7B00              MOV     R3,#00H
003A 7A40              MOV     R2,#040H
003C 798C              MOV     R1,#08CH
003E 7D06              MOV     R5,#06H
0040 7C00              MOV     R4,#00H
0042 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 145
0045 90408E            MOV     DPTR,#0408EH
0048 741B              MOV     A,#01BH
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 11  

004B 7B08              MOV     R3,#08H
004D 7A0C              MOV     R2,#0CH
004F 798C              MOV     R1,#08CH
0051 C003              PUSH    AR3
0053 C002              PUSH    AR2
0055 C001              PUSH    AR1
0057 7B00              MOV     R3,#00H
0059 7A41              MOV     R2,#041H
005B 7900              MOV     R1,#00H
005D 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0060 120000      E     LCALL   ?C?PSTXDATA
0063 D001              POP     AR1
0065 D002              POP     AR2
0067 D003              POP     AR3
0069 7F04              MOV     R7,#04H
006B 7E00              MOV     R6,#00H
006D 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 151
0070 904300            MOV     DPTR,#04300H
0073 7406              MOV     A,#06H
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
0076 904000            MOV     DPTR,#04000H
0079 7408              MOV     A,#08H
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
007C 904200            MOV     DPTR,#04200H
007F 7452              MOV     A,#052H
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
0082 7B0C              MOV     R3,#0CH
0084 7A01              MOV     R2,#01H
0086 790F              MOV     R1,#0FH
0088 120000      E     LCALL   _cyread8
008B 9046A1            MOV     DPTR,#046A1H
008E EF                MOV     A,R7
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
0090 7B00              MOV     R3,#00H
0092 7A42              MOV     R2,#042H
0094 7922              MOV     R1,#022H
0096 7D10              MOV     R5,#010H
0098 7C07              MOV     R4,#07H
009A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 160
009D 7B00              MOV     R3,#00H
009F 7A42              MOV     R2,#042H
00A1 7920              MOV     R1,#020H
00A3 7D51              MOV     R5,#051H
00A5 7C12              MOV     R4,#012H
00A7 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 162
00AA E4                CLR     A
00AB 900000      R     MOV     DPTR,#pllLock
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
00AF 7F19              MOV     R7,#019H
00B1 FE                MOV     R6,A
00B2 FD                MOV     R5,A
00B3 FC                MOV     R4,A
00B4 900000      R     MOV     DPTR,#timeout
00B7 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 12  

00BA         ?C0004:
00BA 900000      R     MOV     DPTR,#timeout
00BD 120000      E     LCALL   ?C?LLDXDATA
00C0 D3                SETB    C
00C1 EF                MOV     A,R7
00C2 9400              SUBB    A,#00H
00C4 EE                MOV     A,R6
00C5 9400              SUBB    A,#00H
00C7 403B              JC      ?C0005
00C9 900000      R     MOV     DPTR,#pllLock
00CC E0                MOVX    A,@DPTR
00CD FF                MOV     R7,A
00CE 6403              XRL     A,#03H
00D0 6032              JZ      ?C0005
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
00D2 904225            MOV     DPTR,#04225H
00D5 E0                MOVX    A,@DPTR
00D6 5401              ANL     A,#01H
00D8 FE                MOV     R6,A
00D9 EF                MOV     A,R7
00DA 25E0              ADD     A,ACC
00DC 4E                ORL     A,R6
00DD 5403              ANL     A,#03H
00DF 900000      R     MOV     DPTR,#pllLock
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
00E3 E4                CLR     A
00E4 7FE0              MOV     R7,#0E0H
00E6 7E01              MOV     R6,#01H
00E8 FD                MOV     R5,A
00E9 FC                MOV     R4,A
00EA 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 167
00ED 900000      R     MOV     DPTR,#timeout
00F0 120000      E     LCALL   ?C?LLDXDATA
00F3 74FF              MOV     A,#0FFH
00F5 FB                MOV     R3,A
00F6 FA                MOV     R2,A
00F7 F9                MOV     R1,A
00F8 F8                MOV     R0,A
00F9 120000      E     LCALL   ?C?LADD
00FC 900000      R     MOV     DPTR,#timeout
00FF 120000      E     LCALL   ?C?LSTXDATA
0102 80B6              SJMP    ?C0004
0104         ?C0005:
                                           ; SOURCE LINE # 169
0104 900000      R     MOV     DPTR,#timeout
0107 120000      E     LCALL   ?C?LLDXDATA
010A EF                MOV     A,R7
010B 4E                ORL     A,R6
010C 7005              JNZ     ?C0007
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
010E 7F03              MOV     R7,#03H
0110 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 172
0113         ?C0007:
                                           ; SOURCE LINE # 175
0113 7B00              MOV     R3,#00H
0115 7A40              MOV     R2,#040H
0117 7904              MOV     R1,#04H
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 13  

0119 7D00              MOV     R5,#00H
011B 7C01              MOV     R4,#01H
011D 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 176
0120 904004            MOV     DPTR,#04004H
0123 7407              MOV     A,#07H
0125 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
0126 904006            MOV     DPTR,#04006H
0129 E4                CLR     A
012A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
012B 904008            MOV     DPTR,#04008H
012E 7448              MOV     A,#048H
0130 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0131 904004            MOV     DPTR,#04004H
0134 E4                CLR     A
0135 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
0136 904009            MOV     DPTR,#04009H
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
013A 904001            MOV     DPTR,#04001H
013D 7402              MOV     A,#02H
013F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
0140 90400B            MOV     DPTR,#0400BH
0143 7404              MOV     A,#04H
0145 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
0146 9043A2            MOV     DPTR,#043A2H
0149 E0                MOVX    A,@DPTR
014A 440F              ORL     A,#0FH
014C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 187
014D 9043A1            MOV     DPTR,#043A1H
0150 E0                MOVX    A,@DPTR
0151 4401              ORL     A,#01H
0153 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
0154 9043A0            MOV     DPTR,#043A0H
0157 E0                MOVX    A,@DPTR
0158 4480              ORL     A,#080H
015A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
015B 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
;---- Variable 'bg_xover_inl_trim' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 214
0009 EF                MOV     A,R7
000A 5407              ANL     A,#07H
000C 90586E            MOV     DPTR,#0586EH
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 14  

000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
0010 EF                MOV     A,R7
0011 C4                SWAP    A
0012 540F              ANL     A,#0FH
0014 A3                INC     DPTR
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
0016 905A8C            MOV     DPTR,#05A8CH
0019 7401              MOV     A,#01H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
001C 905B00            MOV     DPTR,#05B00H
001F 04                INC     A
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
0021 905B58            MOV     DPTR,#05B58H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
0025 905876            MOV     DPTR,#05876H
0028 7444              MOV     A,#044H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
002B 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 240
;---- Variable 'enabled' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 242
0000 905876            MOV     DPTR,#05876H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
;---- Variable 'regValue' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 243
0005 EF                MOV     A,R7
0006 6006              JZ      ?C0010
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
0008 EE                MOV     A,R6
0009 4422              ORL     A,#022H
000B FE                MOV     R6,A
                                           ; SOURCE LINE # 246
000C 8004              SJMP    ?C0011
000E         ?C0010:
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
000E EE                MOV     A,R6
000F 54DD              ANL     A,#0DDH
0011 FE                MOV     R6,A
                                           ; SOURCE LINE # 250
0012         ?C0011:
                                           ; SOURCE LINE # 251
0012 AF06              MOV     R7,AR6
0014 905876            MOV     DPTR,#05876H
0017 EE                MOV     A,R6
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
0019 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 15  

             ; FUNCTION _AMux_1_Set (BEGIN)
                                           ; SOURCE LINE # 282
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9402              SUBB    A,#02H
0004 5055              JNC     ?C0014
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 286
0006 EF                MOV     A,R7
0007 2F                ADD     A,R7
0008 FF                MOV     R7,A
                                           ; SOURCE LINE # 287
0009 25E0              ADD     A,ACC
000B 2400        R     ADD     A,#LOW AMux_1__addrTable
000D F582              MOV     DPL,A
000F E4                CLR     A
0010 3400        R     ADDC    A,#HIGH AMux_1__addrTable
0012 F583              MOV     DPH,A
0014 E4                CLR     A
0015 93                MOVC    A,@A+DPTR
0016 FC                MOV     R4,A
0017 7401              MOV     A,#01H
0019 93                MOVC    A,@A+DPTR
001A F582              MOV     DPL,A
001C 8C83              MOV     DPH,R4
001E C083              PUSH    DPH
0020 C082              PUSH    DPL
0022 E0                MOVX    A,@DPTR
0023 FE                MOV     R6,A
0024 EF                MOV     A,R7
0025 900000      R     MOV     DPTR,#AMux_1__maskTable
0028 93                MOVC    A,@A+DPTR
0029 FD                MOV     R5,A
002A EE                MOV     A,R6
002B 4D                ORL     A,R5
002C D082              POP     DPL
002E D083              POP     DPH
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 288
0031 0F                INC     R7
                                           ; SOURCE LINE # 289
0032 EF                MOV     A,R7
0033 25E0              ADD     A,ACC
0035 2400        R     ADD     A,#LOW AMux_1__addrTable
0037 F582              MOV     DPL,A
0039 E4                CLR     A
003A 3400        R     ADDC    A,#HIGH AMux_1__addrTable
003C F583              MOV     DPH,A
003E E4                CLR     A
003F 93                MOVC    A,@A+DPTR
0040 FC                MOV     R4,A
0041 7401              MOV     A,#01H
0043 93                MOVC    A,@A+DPTR
0044 F582              MOV     DPL,A
0046 8C83              MOV     DPH,R4
0048 C083              PUSH    DPH
004A C082              PUSH    DPL
004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 16  

004E EF                MOV     A,R7
004F 900000      R     MOV     DPTR,#AMux_1__maskTable
0052 93                MOVC    A,@A+DPTR
0053 FF                MOV     R7,A
0054 EE                MOV     A,R6
0055 4F                ORL     A,R7
0056 D082              POP     DPL
0058 D083              POP     DPH
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
005B         ?C0014:
005B 22                RET     
             ; FUNCTION _AMux_1_Set (END)

             ; FUNCTION _AMux_1_Unset (BEGIN)
                                           ; SOURCE LINE # 307
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9402              SUBB    A,#02H
0004 5057              JNC     ?C0016
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
0006 EF                MOV     A,R7
0007 2F                ADD     A,R7
0008 FF                MOV     R7,A
                                           ; SOURCE LINE # 312
0009 25E0              ADD     A,ACC
000B 2400        R     ADD     A,#LOW AMux_1__addrTable
000D F582              MOV     DPL,A
000F E4                CLR     A
0010 3400        R     ADDC    A,#HIGH AMux_1__addrTable
0012 F583              MOV     DPH,A
0014 E4                CLR     A
0015 93                MOVC    A,@A+DPTR
0016 FC                MOV     R4,A
0017 7401              MOV     A,#01H
0019 93                MOVC    A,@A+DPTR
001A F582              MOV     DPL,A
001C 8C83              MOV     DPH,R4
001E C083              PUSH    DPH
0020 C082              PUSH    DPL
0022 E0                MOVX    A,@DPTR
0023 FE                MOV     R6,A
0024 EF                MOV     A,R7
0025 900000      R     MOV     DPTR,#AMux_1__maskTable
0028 93                MOVC    A,@A+DPTR
0029 F4                CPL     A
002A FD                MOV     R5,A
002B EE                MOV     A,R6
002C 5D                ANL     A,R5
002D D082              POP     DPL
002F D083              POP     DPH
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
0032 0F                INC     R7
                                           ; SOURCE LINE # 314
0033 EF                MOV     A,R7
0034 25E0              ADD     A,ACC
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 17  

0036 2400        R     ADD     A,#LOW AMux_1__addrTable
0038 F582              MOV     DPL,A
003A E4                CLR     A
003B 3400        R     ADDC    A,#HIGH AMux_1__addrTable
003D F583              MOV     DPH,A
003F E4                CLR     A
0040 93                MOVC    A,@A+DPTR
0041 FC                MOV     R4,A
0042 7401              MOV     A,#01H
0044 93                MOVC    A,@A+DPTR
0045 F582              MOV     DPL,A
0047 8C83              MOV     DPH,R4
0049 C083              PUSH    DPH
004B C082              PUSH    DPL
004D E0                MOVX    A,@DPTR
004E FE                MOV     R6,A
004F EF                MOV     A,R7
0050 900000      R     MOV     DPTR,#AMux_1__maskTable
0053 93                MOVC    A,@A+DPTR
0054 F4                CPL     A
0055 FF                MOV     R7,A
0056 EE                MOV     A,R6
0057 5F                ANL     A,R7
0058 D082              POP     DPL
005A D083              POP     DPH
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
005D         ?C0016:
005D 22                RET     
             ; FUNCTION _AMux_1_Unset (END)

             ; FUNCTION _ADC_AMux_Set (BEGIN)
                                           ; SOURCE LINE # 345
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9402              SUBB    A,#02H
0004 5029              JNC     ?C0018
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
0006 EF                MOV     A,R7
0007 25E0              ADD     A,ACC
0009 2400        R     ADD     A,#LOW ADC_AMux__addrTable
000B F582              MOV     DPL,A
000D E4                CLR     A
000E 3400        R     ADDC    A,#HIGH ADC_AMux__addrTable
0010 F583              MOV     DPH,A
0012 E4                CLR     A
0013 93                MOVC    A,@A+DPTR
0014 FC                MOV     R4,A
0015 7401              MOV     A,#01H
0017 93                MOVC    A,@A+DPTR
0018 F582              MOV     DPL,A
001A 8C83              MOV     DPH,R4
001C C083              PUSH    DPH
001E C082              PUSH    DPL
0020 E0                MOVX    A,@DPTR
0021 FE                MOV     R6,A
0022 EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 18  

0023 900000      R     MOV     DPTR,#ADC_AMux__maskTable
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 EE                MOV     A,R6
0029 4F                ORL     A,R7
002A D082              POP     DPL
002C D083              POP     DPH
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
002F         ?C0018:
002F 22                RET     
             ; FUNCTION _ADC_AMux_Set (END)

             ; FUNCTION _ADC_AMux_Unset (BEGIN)
                                           ; SOURCE LINE # 367
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9402              SUBB    A,#02H
0004 502A              JNC     ?C0020
                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 371
0006 EF                MOV     A,R7
0007 25E0              ADD     A,ACC
0009 2400        R     ADD     A,#LOW ADC_AMux__addrTable
000B F582              MOV     DPL,A
000D E4                CLR     A
000E 3400        R     ADDC    A,#HIGH ADC_AMux__addrTable
0010 F583              MOV     DPH,A
0012 E4                CLR     A
0013 93                MOVC    A,@A+DPTR
0014 FC                MOV     R4,A
0015 7401              MOV     A,#01H
0017 93                MOVC    A,@A+DPTR
0018 F582              MOV     DPL,A
001A 8C83              MOV     DPH,R4
001C C083              PUSH    DPH
001E C082              PUSH    DPL
0020 E0                MOVX    A,@DPTR
0021 FE                MOV     R6,A
0022 EF                MOV     A,R7
0023 900000      R     MOV     DPTR,#ADC_AMux__maskTable
0026 93                MOVC    A,@A+DPTR
0027 F4                CPL     A
0028 FF                MOV     R7,A
0029 EE                MOV     A,R6
002A 5F                ANL     A,R7
002B D082              POP     DPL
002D D083              POP     DPH
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 373
0030         ?C0020:
0030 22                RET     
             ; FUNCTION _ADC_AMux_Unset (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 19  

                                           ; SOURCE LINE # 397
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4401              ORL     A,#01H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 432
0016 E4                CLR     A
0017 F500        R     MOV     i,A
0019         ?C0021:
0019 E500        R     MOV     A,i
001B C3                CLR     C
001C 9407              SUBB    A,#07H
001E 502C              JNC     ?C0022
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 434
0020 E500        R     MOV     A,i
0022 75F005            MOV     B,#05H
0025 A4                MUL     AB
0026 2400        R     ADD     A,#LOW cfg_memset_list
0028 F582              MOV     DPL,A
002A E4                CLR     A
002B 3400        R     ADDC    A,#HIGH cfg_memset_list
002D AF82              MOV     R7,DPL
002F F500        R     MOV     ms,A
0031 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 435
0033 F583              MOV     DPH,A
0035 120000      E     LCALL   ?C?PLDCODE
0038 8F82              MOV     DPL,R7
003A 850083      R     MOV     DPH,ms
003D 7403              MOV     A,#03H
003F 93                MOVC    A,@A+DPTR
0040 FC                MOV     R4,A
0041 7404              MOV     A,#04H
0043 93                MOVC    A,@A+DPTR
0044 FD                MOV     R5,A
0045 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 436
0048 0500        R     INC     i
004A 80CD              SJMP    ?C0021
004C         ?C0022:
                                           ; SOURCE LINE # 439
004C E4                CLR     A
004D F500        R     MOV     i,A
004F         ?C0024:
004F E500        R     MOV     A,i
0051 C3                CLR     C
0052 9401              SUBB    A,#01H
0054 5061              JNC     ?C0025
                                           ; SOURCE LINE # 440
                                           ; SOURCE LINE # 441
0056 E500        R     MOV     A,i
0058 75F008            MOV     B,#08H
005B A4                MUL     AB
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 20  

005C 2400        R     ADD     A,#LOW cfg_memcpy_list
005E F582              MOV     DPL,A
0060 E4                CLR     A
0061 3400        R     ADDC    A,#HIGH cfg_memcpy_list
0063 AF82              MOV     R7,DPL
0065 F500        R     MOV     mc,A
0067 8F00        R     MOV     mc+01H,R7
                                           ; SOURCE LINE # 442
0069 F583              MOV     DPH,A
006B 120000      E     LCALL   ?C?PLDCODE
006E 8B00        R     MOV     destPtr,R3
0070 8A00        R     MOV     destPtr+01H,R2
0072 8900        R     MOV     destPtr+02H,R1
                                           ; SOURCE LINE # 443
0074 8F82              MOV     DPL,R7
0076 850083      R     MOV     DPH,mc
0079 A3                INC     DPTR
007A A3                INC     DPTR
007B A3                INC     DPTR
007C 120000      E     LCALL   ?C?PLDCODE
007F 8B00        R     MOV     srcPtr,R3
0081 8A00        R     MOV     srcPtr+01H,R2
0083 8900        R     MOV     srcPtr+02H,R1
                                           ; SOURCE LINE # 444
0085 8F82              MOV     DPL,R7
0087 850083      R     MOV     DPH,mc
008A 7406              MOV     A,#06H
008C 93                MOVC    A,@A+DPTR
008D F500        R     MOV     numBytes,A
008F 7407              MOV     A,#07H
0091 93                MOVC    A,@A+DPTR
0092 F500        R     MOV     numBytes+01H,A
                                           ; SOURCE LINE # 445
0094 C003              PUSH    AR3
0096 C002              PUSH    AR2
0098 C001              PUSH    AR1
009A AB00        R     MOV     R3,destPtr
009C AA00        R     MOV     R2,destPtr+01H
009E A900        R     MOV     R1,destPtr+02H
00A0 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00A3 120000      E     LCALL   ?C?PSTXDATA
00A6 D001              POP     AR1
00A8 D002              POP     AR2
00AA D003              POP     AR3
00AC AF00        R     MOV     R7,numBytes+01H
00AE AE00        R     MOV     R6,numBytes
00B0 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 446
00B3 0500        R     INC     i
00B5 8098              SJMP    ?C0024
00B7         ?C0025:
                                           ; SOURCE LINE # 448
00B7 7B08              MOV     R3,#08H
00B9 7A04              MOV     R2,#04H
00BB 79C0              MOV     R1,#0C0H
00BD 120000      E     LCALL   _cfg_write_bytes
                                           ; SOURCE LINE # 451
00C0 905883            MOV     DPTR,#05883H
00C3 740A              MOV     A,#0AH
00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 454
00C6 7B01              MOV     R3,#01H
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 21  

00C8 7A50              MOV     R2,#050H
00CA 7903              MOV     R1,#03H
00CC 120000      E     LCALL   _cyread8
00CF EF                MOV     A,R7
00D0 4402              ORL     A,#02H
00D2 FD                MOV     R5,A
00D3 7B01              MOV     R3,#01H
00D5 7A50              MOV     R2,#050H
00D7 7903              MOV     R1,#03H
00D9 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 455
00DC 7B01              MOV     R3,#01H
00DE 7A50              MOV     R2,#050H
00E0 7913              MOV     R1,#013H
00E2 120000      E     LCALL   _cyread8
00E5 EF                MOV     A,R7
00E6 4402              ORL     A,#02H
00E8 FD                MOV     R5,A
00E9 7B01              MOV     R3,#01H
00EB 7A50              MOV     R2,#050H
00ED 7913              MOV     R1,#013H
00EF 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 458
00F2 9043A0            MOV     DPTR,#043A0H
00F5 E0                MOVX    A,@DPTR
00F6 4440              ORL     A,#040H
00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 459
00F9 9043C2            MOV     DPTR,#043C2H
00FC E0                MOVX    A,@DPTR
00FD 4410              ORL     A,#010H
00FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 464
0100 7B08              MOV     R3,#08H
0102 7A0C              MOV     R2,#0CH
0104 7960              MOV     R1,#060H
0106 C003              PUSH    AR3
0108 C002              PUSH    AR2
010A C001              PUSH    AR1
010C 7B00              MOV     R3,#00H
010E 7A51              MOV     R2,#051H
0110 7902              MOV     R1,#02H
0112 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0115 120000      E     LCALL   ?C?PSTXDATA
0118 D001              POP     AR1
011A D002              POP     AR2
011C D003              POP     AR3
011E 7F08              MOV     R7,#08H
0120 7E00              MOV     R6,#00H
0122 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 465
0125 7B08              MOV     R3,#08H
0127 7A0C              MOV     R2,#0CH
0129 7968              MOV     R1,#068H
012B C003              PUSH    AR3
012D C002              PUSH    AR2
012F C001              PUSH    AR1
0131 7B00              MOV     R3,#00H
0133 7A51              MOV     R2,#051H
0135 79C2              MOV     R1,#0C2H
0137 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 22  

013A 120000      E     LCALL   ?C?PSTXDATA
013D D001              POP     AR1
013F D002              POP     AR2
0141 D003              POP     AR3
0143 7F08              MOV     R7,#08H
0145 7E00              MOV     R6,#00H
0147 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 466
014A 7B08              MOV     R3,#08H
014C 7A0C              MOV     R2,#0CH
014E 7970              MOV     R1,#070H
0150 C003              PUSH    AR3
0152 C002              PUSH    AR2
0154 C001              PUSH    AR1
0156 7B00              MOV     R3,#00H
0158 7A51              MOV     R2,#051H
015A 79F2              MOV     R1,#0F2H
015C 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
015F 120000      E     LCALL   ?C?PSTXDATA
0162 D001              POP     AR1
0164 D002              POP     AR2
0166 D003              POP     AR3
0168 7F08              MOV     R7,#08H
016A 7E00              MOV     R6,#00H
016C 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 467
016F 7B08              MOV     R3,#08H
0171 7A0C              MOV     R2,#0CH
0173 7978              MOV     R1,#078H
0175 C003              PUSH    AR3
0177 C002              PUSH    AR2
0179 C001              PUSH    AR1
017B 7B00              MOV     R3,#00H
017D 7A51              MOV     R2,#051H
017F 7910              MOV     R1,#010H
0181 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0184 120000      E     LCALL   ?C?PSTXDATA
0187 D001              POP     AR1
0189 D002              POP     AR2
018B D003              POP     AR3
018D 7F0A              MOV     R7,#0AH
018F 7E00              MOV     R6,#00H
0191 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 468
0194 7B08              MOV     R3,#08H
0196 7A0C              MOV     R2,#0CH
0198 7984              MOV     R1,#084H
019A C003              PUSH    AR3
019C C002              PUSH    AR2
019E C001              PUSH    AR1
01A0 7B00              MOV     R3,#00H
01A2 7A51              MOV     R2,#051H
01A4 7922              MOV     R1,#022H
01A6 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
01A9 120000      E     LCALL   ?C?PSTXDATA
01AC D001              POP     AR1
01AE D002              POP     AR2
01B0 D003              POP     AR3
01B2 7F08              MOV     R7,#08H
01B4 7E00              MOV     R6,#00H
01B6 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 469
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 23  

01B9 9044F4            MOV     DPTR,#044F4H
01BC 7401              MOV     A,#01H
01BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 471
01BF 904322            MOV     DPTR,#04322H
01C2 E0                MOVX    A,@DPTR
01C3 4408              ORL     A,#08H
01C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
01C6 9046EC            MOV     DPTR,#046ECH
01C9 E0                MOVX    A,@DPTR
01CA C3                CLR     C
01CB 9405              SUBB    A,#05H
01CD 5006              JNC     ?C0027
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 474
01CF 904689            MOV     DPTR,#04689H
01D2 743A              MOV     A,#03AH
01D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 475
01D5         ?C0027:
                                           ; SOURCE LINE # 479
01D5 904800            MOV     DPTR,#04800H
01D8 74F1              MOV     A,#0F1H
01DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
01DB 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 484
01DE 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 487
01E1 7B00              MOV     R3,#00H
01E3 7A43              MOV     R2,#043H
01E5 79A0              MOV     R1,#0A0H
01E7 C001              PUSH    AR1
01E9 79B0              MOV     R1,#0B0H
01EB 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
01EE 120000      E     LCALL   ?C?PSTXDATA
01F1 D001              POP     AR1
01F3 7F0E              MOV     R7,#0EH
01F5 7E00              MOV     R6,#00H
01F7 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 488
01FA 9043B0            MOV     DPTR,#043B0H
01FD E0                MOVX    A,@DPTR
01FE 54FD              ANL     A,#0FDH
0200 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 489
0201 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1218    ----
   CONSTANT SIZE    =     61    ----
   XDATA SIZE       =   ----       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/30/2016 17:24:44 PAGE 24  

   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
