C51 COMPILER V9.51   UTILS                                                                 03/30/2016 19:03:56 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE UTILS
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Release\utils.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Utilities\utils.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) WL(2) PR(.\DP
                    -8051\DP8051_Keil_951\Release/utils.lst) CD OT(8,SIZE) OJ(.\DP8051\DP8051_Keil_951\Release\utils.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          // -----------------------------------------------------------------------------
   2          // Copyright (C)  qbrobotics. All rights reserved.
   3          // www.qbrobotics.com
   4          // -----------------------------------------------------------------------------
   5          
   6          /**
   7          * \file         utils.h
   8          *
   9          * \brief        Definition of utility functions.
  10          * \date         Feb 16, 2014
  11          * \author       qbrobotics
  12          * \copyright    (C)  qbrobotics. All rights reserved.
  13          */
  14          
  15          #include <utils.h>
*** WARNING C318 IN LINE 15 OF .\Utilities\utils.c: can't open file 'utils.h'
  16          #include <math.h>
  17          
  18          //--------------------------------------------------------------     DEFINITIONS
  19          
  20          #define ALPHA 50 // emg filter
  21          #define BETA  32 // current filter
  22          
  23          #define SIGN(A) (((A) > 0) ? (1) : ((((A) < 0) ? (-1) : (0))))
  24          
  25          
  26          
  27          int32 filter_v(int32 new_value) {
*** ERROR C129 IN LINE 27 OF .\Utilities\utils.c: missing ';' before 'filter_v'
  28          
  29              static int32 old_value, aux;
  30          
  31              aux = (old_value * (1024 - BETA) + new_value * (BETA)) / 1024;
  32          
  33              old_value = aux;
  34          
  35              return aux;
  36          }
  37          
  38          int32 filter_i1(int32 new_value) {
  39          
  40              static int32 old_value, aux;
  41          
  42              aux = (old_value * (1024 - BETA) + new_value * (BETA)) / 1024;
  43          
  44              old_value = aux;
  45          
  46              return aux;
  47          }
  48          
  49          
  50          int32 filter_ch1(int32 new_value) {
C51 COMPILER V9.51   UTILS                                                                 03/30/2016 19:03:56 PAGE 2   

  51          
  52              static int32 old_value, aux;
  53          
  54              aux = (old_value * (1024 - ALPHA) + new_value * (ALPHA)) / 1024;
  55          
  56              old_value = aux;
  57          
  58              return aux;
  59          }
  60          
  61          int32 filter_ch2(int32 new_value) {
  62          
  63              static int32 old_value, aux;
  64          
  65              aux = (old_value * (1024 - ALPHA) + new_value * (ALPHA)) / 1024;
  66          
  67              old_value = aux;
  68          
  69              return aux;
  70          }
  71          
  72          //==============================================================================
  73          //                                                                CHECK ENC DATA
  74          //==============================================================================
  75          
  76          // Returns 1 if the encoder data is correct, 0 otherwise
  77          
  78          uint8 check_enc_data(uint32 *value) {
  79          
  80              const uint8* p = (const uint8*)value;
  81              uint8 a = *p;
  82          
  83              a = a ^ *(++p);
  84              a = a ^ *(++p);
  85              a = a ^ *(++p);
  86              a = (a & 0x0F) ^ (a>>4);
  87          
  88              return (0x9669 >> a) & 0x01;
  89              //0x9669 is a bit vector representing the !(bitwise XOR) of 4bits
  90          }
  91          
  92          //==============================================================================
  93          //                                                                ROUND_FUNCTION
  94          //==============================================================================
  95          
  96          int round(double x) {
  97          
  98              if (x < 0.0)
  99                  return (int)(x - 0.5);
 100              else
 101                  return (int)(x + 0.5);
 102          }
 103          
 104          //==============================================================================
 105          //                                                                        MODULE
 106          //==============================================================================
 107          
 108          uint32 my_mod(int32 val, int32 divisor) {
 109          
 110              if (val >= 0) {
 111                  return (int32)(val % divisor);
 112              } else {
C51 COMPILER V9.51   UTILS                                                                 03/30/2016 19:03:56 PAGE 3   

 113                  return (int32)(divisor - (-val % divisor));
 114              }
 115          }
 116          
 117          
 118          //==============================================================================
 119          //                                                                     CALIBRATE
 120          //==============================================================================
 121          
 122          void calibration(void) {
 123              static uint8 direction;                 //0 closing, 1 opening
 124              static uint16 closure_counter;          //Range [0 - 2^16]
 125          
 126          
 127              // closing
 128              if (direction == 0) {
 129                  g_ref.pos[0] += dx_sx_hand * (calib.speed << g_mem.res[0]);
 130                  if ((g_ref.pos[0] * dx_sx_hand) > closed_hand_pos) {
 131                      direction = 1;
 132                  }
 133              } else { //opening
 134                  g_ref.pos[0] -= dx_sx_hand * (calib.speed << g_mem.res[0]);
 135                  if (SIGN(g_ref.pos[0]) != dx_sx_hand) {
 136                      direction = 0;
 137                      closure_counter++;
 138                      if (closure_counter == calib.repetitions) {
 139                          closure_counter = 0;
 140                          calib.enabled = FALSE;
 141                      }
 142                  }
 143              }
 144          }
 145          
 146          
 147          //==============================================================================
 148          //                                                      DOUBLE ENCODER CALC TURN
 149          //==============================================================================
 150          
 151          // Use this matlab function to calculate I1 and I2
 152          //
 153          // function [inv_a, inv_b] = mod_mul_inv(a, b)
 154          //     a = int32(a);
 155          //     b = int32(b);
 156          //     if b == 0
 157          //         inv_a = 1;
 158          //         inv_b = 0;
 159          //         return
 160          //     else
 161          //         q = idivide(a,b,'floor');
 162          //         r = mod(a,b);
 163          //         [s, t] = mod_mul_inv(b, r);
 164          //     end
 165          //     inv_a = t;
 166          //     inv_b = s - q * t;
 167          // return
 168          
 169          // Number of teeth of the two weels
 170          #define N1 28
 171          #define N2 27
 172          
 173          #define I1 1
 174          #define I2 (-1)
C51 COMPILER V9.51   UTILS                                                                 03/30/2016 19:03:56 PAGE 4   

 175          
 176          // Number of ticks per turn
 177          #define M 65536
 178          
 179          
 180          int calc_turns_fcn(int32 pos1, int32 pos2) {
 181          
 182              uint32 a1 = my_mod(pos1 - 32768, M);
 183              uint32 a2 = my_mod(pos2 - ((32768 * N1) / N2), M);
 184          
 185              int32 x = (my_mod( - N2*a2 - N1*a1, M*N2) + M/2) / M;
 186          
 187              return my_mod(x*I1, N2);
 188          }
 189          
 190          /* [] END OF FILE */

C51 COMPILATION COMPLETE.  1 WARNING(S),  1 ERROR(S)
