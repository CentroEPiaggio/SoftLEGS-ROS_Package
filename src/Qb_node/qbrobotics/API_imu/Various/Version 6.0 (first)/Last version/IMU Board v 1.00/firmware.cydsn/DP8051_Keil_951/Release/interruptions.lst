C51 COMPILER V9.51   INTERRUPTIONS                                                         09/22/2016 17:24:11 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE INTERRUPTIONS
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\interruptions.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\interruptions.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) WL(2) PR(.\DP80
                    -51_Keil_951\Release/interruptions.lst) CD OT(11,SPEED) OJ(.\DP8051_Keil_951\Release\interruptions.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          // ----------------------------------------------------------------------------
   2          // Copyright (C)  qbrobotics. All rights reserved.
   3          // www.qbrobotics.com
   4          // ----------------------------------------------------------------------------
   5          
   6          /**
   7          * \file         interruptions.c
   8          *
   9          * \brief        Interruption functions are in this file.
  10          * \date         May 16, 2016
  11          * \author       qbrobotics
  12          * \copyright    (C)  qbrobotics. All rights reserved.
  13          */
  14          
  15          
  16          //=================================================================     includes
  17          #include <interruptions.h>
  18          #include <command_processing.h>
  19          #include <globals.h>
  20          #include <utils.h>
  21          
  22          
  23          //==============================================================================
  24          //                                                            RS485 RX INTERRUPT
  25          //==============================================================================
  26          // Processing RS-485 data frame:
  27          //
  28          // - 0:     Waits for beggining characters
  29          // - 1:     Waits for ID;
  30          // - 2:     Data length;
  31          // - 3:     Receive all bytes;
  32          // - 4:     Wait for another device end of transmission;
  33          //
  34          //==============================================================================
  35          
  36          
  37          //==============================================================================
  38          //                                                            WATCHDOG INTERRUPT
  39          //==============================================================================
  40          
  41          CY_ISR(ISR_WATCHDOG_Handler){
  42   1      
  43   1          // Set WDT flag
  44   1          
  45   1          watchdog_flag = TRUE;
  46   1      
  47   1      }
  48          
  49          //==============================================================================
  50          //                                                            RS485 RX INTERRUPT
  51          //==============================================================================
  52          
C51 COMPILER V9.51   INTERRUPTIONS                                                         09/22/2016 17:24:11 PAGE 2   

  53          CY_ISR(ISR_RS485_RX_ExInterrupt) {
  54   1      
  55   1          // Set RS485 flag
  56   1          
  57   1          interrupt_flag = TRUE;
  58   1           
  59   1      }
  60          
  61          //==============================================================================
  62          //                                                             INTERRUPT MANAGER
  63          //==============================================================================
  64          // Manage interrupt from RS485 
  65          //==============================================================================
  66          // Processing RS-485 data frame:
  67          //
  68          // - WAIT_START:    Waits for beginning characters;
  69          // - WAIT_ID:       Waits for ID;
  70          // - WAIT_LENGTH:   Data length;
  71          // - RECEIVE:       Receive all bytes;
  72          // - UNLOAD:        Wait for another device end of transmission;
  73          //
  74          //==============================================================================
  75          
  76          void interrupt_manager(){
  77   1      
  78   1          
  79   1          //===========================================     local variables definition
  80   1      
  81   1          static uint8 CYDATA state = WAIT_START;                      // state
  82   1          
  83   1          //------------------------------------------------- local data packet
  84   1          static uint8 CYDATA data_packet_index;
  85   1          static uint8 CYDATA data_packet_length;
  86   1          static uint8 data_packet_buffer[128];                     
  87   1          static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
  88   1          //-------------------------------------------------
  89   1      
  90   1          uint8 CYDATA    rx_data;                            // RS485 UART rx data
  91   1          CYBIT           rx_data_type;                       // my id?
  92   1          uint8 CYDATA    package_count = 0;                     
  93   1      
  94   1          //======================================================     receive routine
  95   1          
  96   1          // Get data until buffer is not empty 
  97   1          
  98   1          while(UART_RS485_GetRxBufferSize() && (package_count < 6)){  
  99   2              // 6 stima di numero massimo di pacchetti che riesco a leggere senza bloccare l'esecuzione del fir
             -mware
 100   2              
 101   2              // Get next char
 102   2              rx_data = UART_RS485_GetChar();
 103   2              
 104   2              switch (state) {
 105   3                  //-----     wait for frame start     -------------------------------
 106   3                  case WAIT_START:
 107   3                  
 108   3                      rx_queue[0] = rx_queue[1];
 109   3                      rx_queue[1] = rx_queue[2];
 110   3                      rx_queue[2] = rx_data;
 111   3                      
 112   3                      // Check for header configuration package
 113   3                      if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
C51 COMPILER V9.51   INTERRUPTIONS                                                         09/22/2016 17:24:11 PAGE 3   

 114   4                          rx_queue[0] = 0;
 115   4                          rx_queue[1] = 0;
 116   4                          rx_queue[2] = 0;
 117   4                          state       = WAIT_ID;                    
 118   4                      }else
 119   3                          if ((rx_queue[0] == 63) &&      //ASCII - ?
 120   3                              (rx_queue[1] == 13) &&      //ASCII - CR
 121   3                              (rx_queue[2] == 10))        //ASCII - LF)
 122   3                              infoGet(INFO_ALL);
 123   3                      break;
 124   3      
 125   3                  //-----     wait for id     ----------------------------------------
 126   3                  case  WAIT_ID:
 127   3      
 128   3                      // packet is for my ID or is broadcast
 129   3                      if (rx_data == c_mem.id || rx_data == 0)
 130   3                          rx_data_type = FALSE;
 131   3                      else                //packet is for others
 132   3                          rx_data_type = TRUE;
 133   3                      
 134   3                      data_packet_length = 0;
 135   3                      state = WAIT_LENGTH;
 136   3                      break;
 137   3      
 138   3                  //-----     wait for length     ------------------------------------
 139   3                  case  WAIT_LENGTH:
 140   3      
 141   3       
 142   3                      data_packet_length = rx_data;
 143   3                      // check validity of pack length
 144   3                      if (data_packet_length <= 1) {
 145   4                          data_packet_length = 0;
 146   4                          state = WAIT_START;
 147   4                      } else if (data_packet_length > 128) {
 148   4                          data_packet_length = 0;
 149   4                          state = WAIT_START;
 150   4                      } else {
 151   4                          data_packet_index = 0;
 152   4                          
 153   4                          if(rx_data_type == FALSE)
 154   4                              state = RECEIVE;          // packet for me or broadcast
 155   4                          else
 156   4                              state = UNLOAD;           // packet for others
 157   4                      }
 158   3                      break;
 159   3      
 160   3                  //-----     receiving     -------------------------------------------
 161   3                  case RECEIVE:
 162   3      
 163   3                      data_packet_buffer[data_packet_index] = rx_data;
 164   3                      data_packet_index++;
 165   3                      
 166   3                      // check end of transmission
 167   3                      if (data_packet_index >= data_packet_length) {
 168   4                          // verify if frame ID corresponded to the device ID
 169   4                          if (rx_data_type == FALSE) {
 170   5                              // copying data from buffer to global packet
 171   5                              memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 172   5                              g_rx.length = data_packet_length;
 173   5                              g_rx.ready  = 1;
 174   5                              commProcess();
 175   5                          }
C51 COMPILER V9.51   INTERRUPTIONS                                                         09/22/2016 17:24:11 PAGE 4   

 176   4                          
 177   4                          data_packet_index  = 0;
 178   4                          data_packet_length = 0;
 179   4                          state              = WAIT_START;
 180   4                          package_count++;
 181   4                      
 182   4                      }
 183   3                      break;
 184   3      
 185   3                  //-----     other device is receving     ---------------------------
 186   3                  case UNLOAD:
 187   3                      if (!(--data_packet_length)) {
 188   4                          data_packet_index  = 0;
 189   4                          data_packet_length = 0;
 190   4                          RS485_CTS_Write(1);
 191   4                          RS485_CTS_Write(0);
 192   4                          state              = WAIT_START;
 193   4                          package_count++;
 194   4                      }
 195   3                      break;
 196   3              }
 197   2          }
 198   1      }
 199          //==============================================================================
 200          //                                                            FUNCTION SCHEDULER
 201          //==============================================================================
 202          // Call all the function with the right frequency
 203          //==============================================================================
 204          // Base frequency 1000 Hz
 205          //==============================================================================
 206          
 207          void function_scheduler() {
 208   1       
 209   1          static uint16 counter_calibration = DIV_INIT_VALUE;
 210   1      
 211   1          timer_value0 = (uint32)MY_TIMER_ReadCounter();
 212   1          
 213   1          // Check Interrupt 
 214   1      
 215   1          if (interrupt_flag){
 216   2              interrupt_flag = FALSE;
 217   2              interrupt_manager();
 218   2          }
 219   1        
 220   1          
 221   1          
 222   1          
 223   1         
 224   1          //---------------------------------- Update States
 225   1          
 226   1      //    // Load k-1 state
 227   1      //    memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 228   1      //    memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 229   1      //
 230   1      //    // Load k+1 state
 231   1      //    memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 232   1          
 233   1          memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 234   1      
 235   1          if (interrupt_flag){
 236   2              interrupt_flag = FALSE;
 237   2              interrupt_manager();
C51 COMPILER V9.51   INTERRUPTIONS                                                         09/22/2016 17:24:11 PAGE 5   

 238   2          }
 239   1      
 240   1          timer_value = (uint32)MY_TIMER_ReadCounter();
 241   1          MY_TIMER_WriteCounter(5000000);
 242   1      
 243   1      }
*** WARNING C280 IN LINE 209 OF .\interruptions.c: 'counter_calibration': unreferenced local variable
 244          
 245          
 246          
 247          /* [] END OF FILE */
C51 COMPILER V9.51   INTERRUPTIONS                                                         09/22/2016 17:24:11 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ISR_WATCHDOG_Handler (BEGIN)
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 45
0000 D200        E     SETB    watchdog_flag
                                           ; SOURCE LINE # 47
0002 32                RETI    
             ; FUNCTION ISR_WATCHDOG_Handler (END)

             ; FUNCTION ISR_RS485_RX_ExInterrupt (BEGIN)
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 57
0000 D200        E     SETB    interrupt_flag
                                           ; SOURCE LINE # 59
0002 32                RETI    
             ; FUNCTION ISR_RS485_RX_ExInterrupt (END)

             ; FUNCTION interrupt_manager (BEGIN)
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 92
0000 E4                CLR     A
0001 F500        R     MOV     package_count,A
0003         ?C0003:
                                           ; SOURCE LINE # 98
0003 120000      E     LCALL   UART_RS485_GetRxBufferSize
0006 EF                MOV     A,R7
0007 7003              JNZ     $ + 5H
0009 020000      R     LJMP    ?C0026
000C E500        R     MOV     A,package_count
000E C3                CLR     C
000F 9406              SUBB    A,#06H
0011 4003              JC      $ + 5H
0013 020000      R     LJMP    ?C0026
                                           ; SOURCE LINE # 102
0016 120000      E     LCALL   UART_RS485_GetChar
0019 8F00        R     MOV     rx_data,R7
                                           ; SOURCE LINE # 104
001B E500        R     MOV     A,state
001D 14                DEC     A
001E 6049              JZ      ?C0010
0020 14                DEC     A
0021 6060              JZ      ?C0014
0023 14                DEC     A
0024 7003              JNZ     $ + 5H
0026 020000      R     LJMP    ?C0021
0029 14                DEC     A
002A 7003              JNZ     $ + 5H
002C 020000      R     LJMP    ?C0024
002F 2404              ADD     A,#04H
0031 70D0              JNZ     ?C0003
                                           ; SOURCE LINE # 106
0033         ?C0006:
                                           ; SOURCE LINE # 108
0033 850000      R     MOV     rx_queue,rx_queue+01H
                                           ; SOURCE LINE # 109
0036 850000      R     MOV     rx_queue+01H,rx_queue+02H
                                           ; SOURCE LINE # 110
0039 850000      R     MOV     rx_queue+02H,rx_data
                                           ; SOURCE LINE # 113
003C E500        R     MOV     A,rx_queue+01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         09/22/2016 17:24:11 PAGE 7   

003E B43A11            CJNE    A,#03AH,?C0007
0041 E500        R     MOV     A,rx_queue+02H
0043 B43A0C            CJNE    A,#03AH,?C0007
                                           ; SOURCE LINE # 114
0046 E4                CLR     A
0047 F500        R     MOV     rx_queue,A
                                           ; SOURCE LINE # 115
0049 F500        R     MOV     rx_queue+01H,A
                                           ; SOURCE LINE # 116
004B F500        R     MOV     rx_queue+02H,A
                                           ; SOURCE LINE # 117
004D 750001      R     MOV     state,#01H
                                           ; SOURCE LINE # 118
0050 80B1              SJMP    ?C0003
0052         ?C0007:
                                           ; SOURCE LINE # 119
0052 E500        R     MOV     A,rx_queue
0054 B43FAC            CJNE    A,#03FH,?C0003
0057 E500        R     MOV     A,rx_queue+01H
0059 B40DA7            CJNE    A,#0DH,?C0003
005C E500        R     MOV     A,rx_queue+02H
005E 640A              XRL     A,#0AH
0060 70A1              JNZ     ?C0003
                                           ; SOURCE LINE # 122
0062 FF                MOV     R7,A
0063 FE                MOV     R6,A
0064 120000      E     LCALL   _infoGet
                                           ; SOURCE LINE # 123
0067 809A              SJMP    ?C0003
                                           ; SOURCE LINE # 126
0069         ?C0010:
                                           ; SOURCE LINE # 129
0069 900000      E     MOV     DPTR,#c_mem+01H
006C E0                MOVX    A,@DPTR
006D 6500        R     XRL     A,rx_data
006F 6004              JZ      ?C0012
0071 E500        R     MOV     A,rx_data
0073 7004              JNZ     ?C0011
0075         ?C0012:
                                           ; SOURCE LINE # 130
0075 C200        R     CLR     rx_data_type
0077 8002              SJMP    ?C0013
0079         ?C0011:
                                           ; SOURCE LINE # 132
0079 D200        R     SETB    rx_data_type
007B         ?C0013:
                                           ; SOURCE LINE # 134
007B E4                CLR     A
007C F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 135
007E 750002      R     MOV     state,#02H
                                           ; SOURCE LINE # 136
0081 8080              SJMP    ?C0003
                                           ; SOURCE LINE # 139
0083         ?C0014:
                                           ; SOURCE LINE # 142
0083 850000      R     MOV     data_packet_length,rx_data
                                           ; SOURCE LINE # 144
0086 E500        R     MOV     A,data_packet_length
0088 D3                SETB    C
0089 9401              SUBB    A,#01H
008B 5008              JNC     ?C0015
C51 COMPILER V9.51   INTERRUPTIONS                                                         09/22/2016 17:24:11 PAGE 8   

                                           ; SOURCE LINE # 145
008D E4                CLR     A
008E F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 146
0090 F500        R     MOV     state,A
                                           ; SOURCE LINE # 147
0092 020000      R     LJMP    ?C0003
0095         ?C0015:
0095 E500        R     MOV     A,data_packet_length
0097 D3                SETB    C
0098 9480              SUBB    A,#080H
009A 4008              JC      ?C0017
                                           ; SOURCE LINE # 148
009C E4                CLR     A
009D F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 149
009F F500        R     MOV     state,A
                                           ; SOURCE LINE # 150
00A1 020000      R     LJMP    ?C0003
00A4         ?C0017:
                                           ; SOURCE LINE # 151
00A4 E4                CLR     A
00A5 F500        R     MOV     data_packet_index,A
                                           ; SOURCE LINE # 153
00A7 200006            JB      rx_data_type,?C0019
                                           ; SOURCE LINE # 154
00AA 750003      R     MOV     state,#03H
00AD 020000      R     LJMP    ?C0003
00B0         ?C0019:
                                           ; SOURCE LINE # 156
00B0 750004      R     MOV     state,#04H
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
00B3 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 161
00B6         ?C0021:
                                           ; SOURCE LINE # 163
00B6 7400        R     MOV     A,#LOW data_packet_buffer
00B8 2500        R     ADD     A,data_packet_index
00BA F582              MOV     DPL,A
00BC E4                CLR     A
00BD 3400        R     ADDC    A,#HIGH data_packet_buffer
00BF F583              MOV     DPH,A
00C1 E500        R     MOV     A,rx_data
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
00C4 0500        R     INC     data_packet_index
                                           ; SOURCE LINE # 167
00C6 E500        R     MOV     A,data_packet_index
00C8 C3                CLR     C
00C9 9500        R     SUBB    A,data_packet_length
00CB 5003              JNC     $ + 5H
00CD 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 169
00D0 200025            JB      rx_data_type,?C0023
                                           ; SOURCE LINE # 171
00D3 AF00        R     MOV     R7,data_packet_length
00D5 7E00              MOV     R6,#00H
00D7 7800        E     MOV     R0,#LOW g_rx
00D9 7C00        E     MOV     R4,#HIGH g_rx
00DB 7D01              MOV     R5,#01H
00DD 7B01              MOV     R3,#01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         09/22/2016 17:24:11 PAGE 9   

00DF 7A00        R     MOV     R2,#HIGH data_packet_buffer
00E1 7900        R     MOV     R1,#LOW data_packet_buffer
00E3 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 172
00E6 900000      E     MOV     DPTR,#g_rx+080H
00E9 E4                CLR     A
00EA F0                MOVX    @DPTR,A
00EB A3                INC     DPTR
00EC E500        R     MOV     A,data_packet_length
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
00EF 900000      E     MOV     DPTR,#g_rx+084H
00F2 7401              MOV     A,#01H
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
00F5 120000      E     LCALL   commProcess
                                           ; SOURCE LINE # 175
00F8         ?C0023:
                                           ; SOURCE LINE # 177
00F8 E4                CLR     A
00F9 F500        R     MOV     data_packet_index,A
                                           ; SOURCE LINE # 178
00FB F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 179
00FD F500        R     MOV     state,A
                                           ; SOURCE LINE # 180
00FF 0500        R     INC     package_count
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
0101 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 186
0104         ?C0024:
                                           ; SOURCE LINE # 187
0104 1500        R     DEC     data_packet_length
0106 E500        R     MOV     A,data_packet_length
0108 6003              JZ      $ + 5H
010A 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 188
010D F500        R     MOV     data_packet_index,A
                                           ; SOURCE LINE # 189
010F F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 190
0111 7F01              MOV     R7,#01H
0113 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 191
0116 E4                CLR     A
0117 FF                MOV     R7,A
0118 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 192
011B E4                CLR     A
011C F500        R     MOV     state,A
                                           ; SOURCE LINE # 193
011E 0500        R     INC     package_count
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
0120 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
0123 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 198
0126         ?C0026:
0126 22                RET     
C51 COMPILER V9.51   INTERRUPTIONS                                                         09/22/2016 17:24:11 PAGE 10  

             ; FUNCTION interrupt_manager (END)

             ; FUNCTION function_scheduler (BEGIN)
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 211
0000 120000      E     LCALL   MY_TIMER_ReadCounter
0003 900000      E     MOV     DPTR,#timer_value0
0006 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 215
0009 300005            JNB     interrupt_flag,?C0027
                                           ; SOURCE LINE # 216
000C C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 217
000E 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 218
0011         ?C0027:
                                           ; SOURCE LINE # 233
0011 7800        E     MOV     R0,#LOW g_imu
0013 7C00        E     MOV     R4,#HIGH g_imu
0015 7D01              MOV     R5,#01H
0017 7B01              MOV     R3,#01H
0019 7A00        E     MOV     R2,#HIGH g_imuNew
001B 7900        E     MOV     R1,#LOW g_imuNew
001D 7E02              MOV     R6,#02H
001F 7F75              MOV     R7,#075H
0021 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 235
0024 300005            JNB     interrupt_flag,?C0028
                                           ; SOURCE LINE # 236
0027 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 237
0029 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 238
002C         ?C0028:
                                           ; SOURCE LINE # 240
002C 120000      E     LCALL   MY_TIMER_ReadCounter
002F 900000      E     MOV     DPTR,#timer_value
0032 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 241
0035 7F40              MOV     R7,#040H
0037 7E4B              MOV     R6,#04BH
0039 7D4C              MOV     R5,#04CH
003B 7C00              MOV     R4,#00H
003D 120000      E     LCALL   _MY_TIMER_WriteCounter
                                           ; SOURCE LINE # 243
0040 22                RET     
             ; FUNCTION function_scheduler (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    366    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    130    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.51   INTERRUPTIONS                                                         09/22/2016 17:24:11 PAGE 11  

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
