C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE ISR_IMU
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\isr_imu.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\isr_imu.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG
                    -) WL(2) PR(.\DP8051_Keil_951\Release/isr_imu.lst) CD OT(11,SPEED) OJ(.\DP8051_Keil_951\Release\isr_imu.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * File Name: isr_imu.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          
  19          #include <cydevice_trm.h>
  20          #include <CyLib.h>
  21          #include <isr_imu.h>
  22          
  23          
  24          #if !defined(isr_imu__REMOVED) /* Check for removal by optimization */
  25          
  26          /*******************************************************************************
  27          *  Place your includes, defines and code here 
  28          ********************************************************************************/
  29          /* `#START isr_imu_intc` */
  30          #include <IMU_functions.h>
  31          #include <command_processing.h>
  32          
  33          extern uint8 N_IMU_Connected;
  34          extern uint8 IMU_connected[N_IMU_MAX];
  35          extern uint8 IMU_conf[N_IMU_MAX][3];
  36          extern uint8 imu_send_flag;
  37          extern int imus_data_size;
  38          extern int single_imu_size[N_IMU_MAX];
  39          
  40          extern uint8 Accel[N_IMU_MAX][6];
  41          extern uint8 Gyro[N_IMU_MAX][6];
  42          extern uint8 Mag[N_IMU_MAX][6];   
  43          extern struct st_imu g_imu[N_IMU_MAX];
  44          
  45          extern float scaleAccFactor; 
  46          extern float scaleGyroFactor;
  47          extern float scaleMagFactor;
  48          /* `#END` */
  49          
  50          
  51          /*******************************************************************************
  52          * Function Name: isr_imu_Start
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 2   

  53          ********************************************************************************
  54          *
  55          * Summary:
  56          *  Set up the interrupt and enable it. This function disables the interrupt, 
  57          *  sets the default interrupt vector, sets the priority from the value in the
  58          *  Design Wide Resources Interrupt Editor, then enables the interrupt to the 
  59          *  interrupt controller.
  60          *
  61          * Parameters:  
  62          *   None
  63          *
  64          * Return:
  65          *   None
  66          *
  67          *******************************************************************************/
  68          void isr_imu_Start(void) 
  69          {
  70   1          /* For all we know the interrupt is active. */
  71   1          isr_imu_Disable();
  72   1      
  73   1          /* Set the ISR to point to the isr_imu Interrupt. */
  74   1          isr_imu_SetVector(&isr_imu_Interrupt);
  75   1      
  76   1          /* Set the priority. */
  77   1          isr_imu_SetPriority((uint8)isr_imu_INTC_PRIOR_NUMBER);
  78   1      
  79   1          /* Enable it. */
  80   1          isr_imu_Enable();
  81   1      }
  82          
  83          
  84          /*******************************************************************************
  85          * Function Name: isr_imu_StartEx
  86          ********************************************************************************
  87          *
  88          * Summary:
  89          *  Sets up the interrupt and enables it. This function disables the interrupt,
  90          *  sets the interrupt vector based on the address passed in, sets the priority 
  91          *  from the value in the Design Wide Resources Interrupt Editor, then enables 
  92          *  the interrupt to the interrupt controller.
  93          *  
  94          *  When defining ISR functions, the CY_ISR and CY_ISR_PROTO macros should be 
  95          *  used to provide consistent definition across compilers:
  96          *  
  97          *  Function definition example:
  98          *   CY_ISR(MyISR)
  99          *   {
 100          *   }
 101          *   Function prototype example:
 102          *   CY_ISR_PROTO(MyISR);
 103          *
 104          * Parameters:  
 105          *   address: Address of the ISR to set in the interrupt vector table.
 106          *
 107          * Return:
 108          *   None
 109          *
 110          *******************************************************************************/
 111          void isr_imu_StartEx(cyisraddress address) 
 112          {
 113   1          /* For all we know the interrupt is active. */
 114   1          isr_imu_Disable();
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 3   

 115   1      
 116   1          /* Set the ISR to point to the isr_imu Interrupt. */
 117   1          isr_imu_SetVector(address);
 118   1      
 119   1          /* Set the priority. */
 120   1          isr_imu_SetPriority((uint8)isr_imu_INTC_PRIOR_NUMBER);
 121   1      
 122   1          /* Enable it. */
 123   1          isr_imu_Enable();
 124   1      }
 125          
 126          
 127          /*******************************************************************************
 128          * Function Name: isr_imu_Stop
 129          ********************************************************************************
 130          *
 131          * Summary:
 132          *   Disables and removes the interrupt.
 133          *
 134          * Parameters:  
 135          *   None
 136          *
 137          * Return:
 138          *   None
 139          *
 140          *******************************************************************************/
 141          void isr_imu_Stop(void) 
 142          {
 143   1          /* Disable this interrupt. */
 144   1          isr_imu_Disable();
 145   1      }
 146          
 147          
 148          /*******************************************************************************
 149          * Function Name: isr_imu_Interrupt
 150          ********************************************************************************
 151          *
 152          * Summary:
 153          *   The default Interrupt Service Routine for isr_imu.
 154          *
 155          *   Add custom code between the START and END comments to keep the next version
 156          *   of this file from over-writing your code.
 157          *
 158          *   Note You may use either the default ISR by using this API, or you may define
 159          *   your own separate ISR through ISR_StartEx().
 160          *
 161          * Parameters:  
 162          *   None
 163          *
 164          * Return:
 165          *   None
 166          *
 167          *******************************************************************************/
 168          CY_ISR(isr_imu_Interrupt)
 169          {
 170   1          #ifdef isr_imu_INTERRUPT_INTERRUPT_CALLBACK
                      isr_imu_Interrupt_InterruptCallback();
                  #endif /* isr_imu_INTERRUPT_INTERRUPT_CALLBACK */
 173   1      
 174   1          /*  Place your Interrupt code here. */
 175   1          /* `#START isr_imu_Interrupt` */
 176   1          uint8 k_imu;
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 4   

 177   1          uint8 c = 1;
 178   1          uint8 k = 0;
 179   1          uint8 gl_c = 1;
 180   1          uint16 tmp = 0;
 181   1      
 182   1          // Packet: header + imu id(uint8) + imu flags(uint8) + crc  
 183   1          uint8 packet_data[350];
 184   1          uint8 single_packet[20];
 185   1          
 186   1          for (k_imu = 0; k_imu < N_IMU_Connected; k_imu++){
 187   2              ChipSelector(IMU_connected[k_imu]);
 188   2              ReadIMU(IMU_connected[k_imu]);   
 189   2             
 190   2              tmp = Accel[IMU_connected[k_imu]][0];
 191   2              g_imu[k_imu].accel_value[0] = (int16)(tmp<<8 | Accel[IMU_connected[k_imu]][1]);
 192   2              tmp = Accel[IMU_connected[k_imu]][2];
 193   2              g_imu[k_imu].accel_value[1] = (int16)(tmp<<8 | Accel[IMU_connected[k_imu]][3]);
 194   2              tmp = Accel[IMU_connected[k_imu]][4];
 195   2              g_imu[k_imu].accel_value[2] = (int16)(tmp<<8 | Accel[IMU_connected[k_imu]][5]);
 196   2              
 197   2              tmp = Gyro[IMU_connected[k_imu]][0];
 198   2              g_imu[k_imu].gyro_value[0] = (int16)(tmp<<8 | Gyro[IMU_connected[k_imu]][1]);
 199   2              tmp = Gyro[IMU_connected[k_imu]][2];
 200   2              g_imu[k_imu].gyro_value[1] = (int16)(tmp<<8 | Gyro[IMU_connected[k_imu]][3]);
 201   2              tmp = Gyro[IMU_connected[k_imu]][4];
 202   2              g_imu[k_imu].gyro_value[2] = (int16)(tmp<<8 | Gyro[IMU_connected[k_imu]][5]);
 203   2              
 204   2              tmp = Mag[IMU_connected[k_imu]][0];
 205   2              g_imu[k_imu].mag_value[0] = (int16)(tmp<<8 | Mag[IMU_connected[k_imu]][1]);
 206   2              tmp = Mag[IMU_connected[k_imu]][2];
 207   2              g_imu[k_imu].mag_value[1] = (int16)(tmp<<8 | Mag[IMU_connected[k_imu]][3]);
 208   2              tmp = Mag[IMU_connected[k_imu]][4];
 209   2              g_imu[k_imu].mag_value[2] = (int16)(tmp<<8 | Mag[IMU_connected[k_imu]][5]);
 210   2          }
 211   1        
 212   1          
 213   1          if (imu_send_flag == 1){
 214   2              //Header package 
 215   2              packet_data[0] = CMD_GET_IMU_READINGS;
 216   2           
 217   2              for (k_imu = 0; k_imu < N_IMU_Connected; k_imu++) 
 218   2              {       
 219   3                  
 220   3                  single_packet[0] = (uint8) 0x3A; //':';
 221   3                  if (IMU_conf[IMU_connected[k_imu]][0]){
 222   4                      *((int16 *) &single_packet[c]) = (int16) g_imu[k_imu].accel_value[0];
 223   4                      *((int16 *) &single_packet[c+2]) = (int16) g_imu[k_imu].accel_value[1];
 224   4                      *((int16 *) &single_packet[c+4]) = (int16) g_imu[k_imu].accel_value[2];
 225   4                      c = c + 6;
 226   4                  }
 227   3                  if (IMU_conf[IMU_connected[k_imu]][1]){
 228   4                      *((int16 *) &single_packet[c])   = (int16) g_imu[k_imu].gyro_value[0];
 229   4                      *((int16 *) &single_packet[c+2]) = (int16) g_imu[k_imu].gyro_value[1];
 230   4                      *((int16 *) &single_packet[c+4]) = (int16) g_imu[k_imu].gyro_value[2];
 231   4                      c = c + 6;
 232   4                  }
 233   3                  if (IMU_conf[IMU_connected[k_imu]][2]){
 234   4                      *((int16 *) &single_packet[c])   = (int16) g_imu[k_imu].mag_value[0];
 235   4                      *((int16 *) &single_packet[c+2]) = (int16) g_imu[k_imu].mag_value[1];
 236   4                      *((int16 *) &single_packet[c+4]) = (int16) g_imu[k_imu].mag_value[2];
 237   4                      c = c + 6;
 238   4                  }
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 5   

 239   3                  single_packet[single_imu_size[IMU_connected[k_imu]] - 1] = (uint8) 0x3A; //':';
 240   3                  c = 1;
 241   3                 
 242   3                  
 243   3                  for(k=0; k < single_imu_size[IMU_connected[k_imu]]; k++) {
 244   4                      packet_data[gl_c + k] = (uint8) single_packet[k]; 
 245   4                  }
 246   3                  gl_c = gl_c + single_imu_size[IMU_connected[k_imu]];  
 247   3                  
 248   3                  memset(&single_packet, 0, sizeof(single_packet));     
 249   3                  
 250   3              }
 251   2      
 252   2              // Calculate Checksum and send message to UART 
 253   2              packet_data[imus_data_size-1] = LCRChecksum (packet_data, imus_data_size-1);
 254   2              commWrite(packet_data, imus_data_size);
 255   2          
 256   2              imu_send_flag = 0;
 257   2          }
 258   1          
 259   1          /* `#END` */
 260   1      
 261   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 262   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 263   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (isr_imu__ES2_PATCH ))      
                          isr_imu_ISR_PATCH();
                      #endif /* CYDEV_CHIP_REVISION_USED */
 266   1          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3) */
 267   1      }
 268          
 269          
 270          /*******************************************************************************
 271          * Function Name: isr_imu_SetVector
 272          ********************************************************************************
 273          *
 274          * Summary:
 275          *   Change the ISR vector for the Interrupt. Note calling isr_imu_Start
 276          *   will override any effect this method would have had. To set the vector 
 277          *   before the component has been started use isr_imu_StartEx instead.
 278          * 
 279          *   When defining ISR functions, the CY_ISR and CY_ISR_PROTO macros should be 
 280          *   used to provide consistent definition across compilers:
 281          *
 282          *   Function definition example:
 283          *   CY_ISR(MyISR)
 284          *   {
 285          *   }
 286          *
 287          *   Function prototype example:
 288          *     CY_ISR_PROTO(MyISR);
 289          *
 290          * Parameters:
 291          *   address: Address of the ISR to set in the interrupt vector table.
 292          *
 293          * Return:
 294          *   None
 295          *
 296          *******************************************************************************/
 297          void isr_imu_SetVector(cyisraddress address) 
 298          {
 299   1          CY_SET_REG16(isr_imu_INTC_VECTOR, (uint16) address);
 300   1      }
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 6   

 301          
 302          
 303          /*******************************************************************************
 304          * Function Name: isr_imu_GetVector
 305          ********************************************************************************
 306          *
 307          * Summary:
 308          *   Gets the "address" of the current ISR vector for the Interrupt.
 309          *
 310          * Parameters:
 311          *   None
 312          *
 313          * Return:
 314          *   Address of the ISR in the interrupt vector table.
 315          *
 316          *******************************************************************************/
 317          cyisraddress isr_imu_GetVector(void) 
 318          {
 319   1          return (cyisraddress) CY_GET_REG16(isr_imu_INTC_VECTOR);
 320   1      }
 321          
 322          
 323          /*******************************************************************************
 324          * Function Name: isr_imu_SetPriority
 325          ********************************************************************************
 326          *
 327          * Summary:
 328          *   Sets the Priority of the Interrupt. 
 329          *
 330          *   Note calling isr_imu_Start or isr_imu_StartEx will 
 331          *   override any effect this API would have had. This API should only be called
 332          *   after isr_imu_Start or isr_imu_StartEx has been called. 
 333          *   To set the initial priority for the component, use the Design-Wide Resources
 334          *   Interrupt Editor.
 335          *
 336          *   Note This API has no effect on Non-maskable interrupt NMI).
 337          *
 338          * Parameters:
 339          *   priority: Priority of the interrupt, 0 being the highest priority
 340          *             PSoC 3 and PSoC 5LP: Priority is from 0 to 7.
 341          *             PSoC 4: Priority is from 0 to 3.
 342          *
 343          * Return:
 344          *   None
 345          *
 346          *******************************************************************************/
 347          void isr_imu_SetPriority(uint8 priority) 
 348          {
 349   1          *isr_imu_INTC_PRIOR = priority << 5;
 350   1      }
 351          
 352          
 353          /*******************************************************************************
 354          * Function Name: isr_imu_GetPriority
 355          ********************************************************************************
 356          *
 357          * Summary:
 358          *   Gets the Priority of the Interrupt.
 359          *
 360          * Parameters:
 361          *   None
 362          *
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 7   

 363          * Return:
 364          *   Priority of the interrupt, 0 being the highest priority
 365          *    PSoC 3 and PSoC 5LP: Priority is from 0 to 7.
 366          *    PSoC 4: Priority is from 0 to 3.
 367          *
 368          *******************************************************************************/
 369          uint8 isr_imu_GetPriority(void) 
 370          {
 371   1          uint8 priority;
 372   1      
 373   1      
 374   1          priority = *isr_imu_INTC_PRIOR >> 5;
 375   1      
 376   1          return priority;
 377   1      }
 378          
 379          
 380          /*******************************************************************************
 381          * Function Name: isr_imu_Enable
 382          ********************************************************************************
 383          *
 384          * Summary:
 385          *   Enables the interrupt to the interrupt controller. Do not call this function
 386          *   unless ISR_Start() has been called or the functionality of the ISR_Start() 
 387          *   function, which sets the vector and the priority, has been called.
 388          *
 389          * Parameters:
 390          *   None
 391          *
 392          * Return:
 393          *   None
 394          *
 395          *******************************************************************************/
 396          void isr_imu_Enable(void) 
 397          {
 398   1          /* Enable the general interrupt. */
 399   1          *isr_imu_INTC_SET_EN = isr_imu__INTC_MASK;
 400   1      }
 401          
 402          
 403          /*******************************************************************************
 404          * Function Name: isr_imu_GetState
 405          ********************************************************************************
 406          *
 407          * Summary:
 408          *   Gets the state (enabled, disabled) of the Interrupt.
 409          *
 410          * Parameters:
 411          *   None
 412          *
 413          * Return:
 414          *   1 if enabled, 0 if disabled.
 415          *
 416          *******************************************************************************/
 417          uint8 isr_imu_GetState(void) 
 418          {
 419   1          /* Get the state of the general interrupt. */
 420   1          return ((*isr_imu_INTC_SET_EN & (uint8)isr_imu__INTC_MASK) != 0u) ? 1u:0u;
 421   1      }
 422          
 423          
 424          /*******************************************************************************
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 8   

 425          * Function Name: isr_imu_Disable
 426          ********************************************************************************
 427          *
 428          * Summary:
 429          *   Disables the Interrupt in the interrupt controller.
 430          *
 431          * Parameters:
 432          *   None
 433          *
 434          * Return:
 435          *   None
 436          *
 437          *******************************************************************************/
 438          void isr_imu_Disable(void) 
 439          {
 440   1          /* Disable the general interrupt. */
 441   1          *isr_imu_INTC_CLR_EN = isr_imu__INTC_MASK;
 442   1      }
 443          
 444          
 445          /*******************************************************************************
 446          * Function Name: isr_imu_SetPending
 447          ********************************************************************************
 448          *
 449          * Summary:
 450          *   Causes the Interrupt to enter the pending state, a software method of
 451          *   generating the interrupt.
 452          *
 453          * Parameters:
 454          *   None
 455          *
 456          * Return:
 457          *   None
 458          *
 459          * Side Effects:
 460          *   If interrupts are enabled and the interrupt is set up properly, the ISR is
 461          *   entered (depending on the priority of this interrupt and other pending 
 462          *   interrupts).
 463          *
 464          *******************************************************************************/
 465          void isr_imu_SetPending(void) 
 466          {
 467   1          *isr_imu_INTC_SET_PD = isr_imu__INTC_MASK;
 468   1      }
 469          
 470          
 471          /*******************************************************************************
 472          * Function Name: isr_imu_ClearPending
 473          ********************************************************************************
 474          *
 475          * Summary:
 476          *   Clears a pending interrupt in the interrupt controller.
 477          *
 478          *   Note Some interrupt sources are clear-on-read and require the block 
 479          *   interrupt/status register to be read/cleared with the appropriate block API 
 480          *   (GPIO, UART, and so on). Otherwise the ISR will continue to remain in 
 481          *   pending state even though the interrupt itself is cleared using this API.
 482          *
 483          * Parameters:
 484          *   None
 485          *
 486          * Return:
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 9   

 487          *   None
 488          *
 489          *******************************************************************************/
 490          void isr_imu_ClearPending(void) 
 491          {
 492   1          *isr_imu_INTC_CLR_PD = isr_imu__INTC_MASK;
 493   1      }
 494          
 495          #endif /* End check for removal by optimization */
 496          
 497          
 498          /* [] END OF FILE */
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION isr_imu_Start (BEGIN)
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 71
0000 120000      R     LCALL   isr_imu_Disable
                                           ; SOURCE LINE # 74
0003 7E00        R     MOV     R6,#HIGH isr_imu_Interrupt
0005 7F00        R     MOV     R7,#LOW isr_imu_Interrupt
0007 120000      R     LCALL   _isr_imu_SetVector
                                           ; SOURCE LINE # 77
000A 7F03              MOV     R7,#03H
000C 120000      R     LCALL   _isr_imu_SetPriority
                                           ; SOURCE LINE # 80
000F 120000      R     LCALL   isr_imu_Enable
                                           ; SOURCE LINE # 81
0012 22                RET     
             ; FUNCTION isr_imu_Start (END)

             ; FUNCTION _isr_imu_StartEx (BEGIN)
                                           ; SOURCE LINE # 111
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 114
0008 120000      R     LCALL   isr_imu_Disable
                                           ; SOURCE LINE # 117
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _isr_imu_SetVector
                                           ; SOURCE LINE # 120
0016 7F03              MOV     R7,#03H
0018 120000      R     LCALL   _isr_imu_SetPriority
                                           ; SOURCE LINE # 123
001B 120000      R     LCALL   isr_imu_Enable
                                           ; SOURCE LINE # 124
001E 22                RET     
             ; FUNCTION _isr_imu_StartEx (END)

             ; FUNCTION isr_imu_Stop (BEGIN)
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 144
0000 120000      R     LCALL   isr_imu_Disable
                                           ; SOURCE LINE # 145
0003 22                RET     
             ; FUNCTION isr_imu_Stop (END)

             ; FUNCTION isr_imu_Interrupt (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 11  

0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 177
002B 900000      R     MOV     DPTR,#c
002E 7401              MOV     A,#01H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
0031 A3                INC     DPTR
0032 E4                CLR     A
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0034 A3                INC     DPTR
0035 04                INC     A
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
0037 A3                INC     DPTR
0038 E4                CLR     A
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
003C 900000      R     MOV     DPTR,#k_imu
003F F0                MOVX    @DPTR,A
0040         ?C0004:
0040 900000      E     MOV     DPTR,#N_IMU_Connected
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 900000      R     MOV     DPTR,#k_imu
0048 E0                MOVX    A,@DPTR
0049 FE                MOV     R6,A
004A C3                CLR     C
004B 9F                SUBB    A,R7
004C 4003              JC      $ + 5H
004E 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 187
0051 7400        E     MOV     A,#LOW IMU_connected
0053 2E                ADD     A,R6
0054 F582              MOV     DPL,A
0056 E4                CLR     A
0057 3400        E     ADDC    A,#HIGH IMU_connected
0059 F583              MOV     DPH,A
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 7E00              MOV     R6,#00H
005F 120000      E     LCALL   _ChipSelector
                                           ; SOURCE LINE # 188
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 12  

0062 900000      R     MOV     DPTR,#k_imu
0065 E0                MOVX    A,@DPTR
0066 2400        E     ADD     A,#LOW IMU_connected
0068 F582              MOV     DPL,A
006A E4                CLR     A
006B 3400        E     ADDC    A,#HIGH IMU_connected
006D F583              MOV     DPH,A
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 7E00              MOV     R6,#00H
0073 120000      E     LCALL   _ReadIMU
                                           ; SOURCE LINE # 190
0076 900000      R     MOV     DPTR,#k_imu
0079 E0                MOVX    A,@DPTR
007A FD                MOV     R5,A
007B 2400        E     ADD     A,#LOW IMU_connected
007D F582              MOV     DPL,A
007F E4                CLR     A
0080 3400        E     ADDC    A,#HIGH IMU_connected
0082 F583              MOV     DPH,A
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 75F006            MOV     B,#06H
0089 A4                MUL     AB
008A 2400        E     ADD     A,#LOW Accel
008C F582              MOV     DPL,A
008E E4                CLR     A
008F 3400        E     ADDC    A,#HIGH Accel
0091 F583              MOV     DPH,A
0093 E0                MOVX    A,@DPTR
0094 FB                MOV     R3,A
0095 900000      R     MOV     DPTR,#tmp
0098 E4                CLR     A
0099 F0                MOVX    @DPTR,A
009A A3                INC     DPTR
009B EB                MOV     A,R3
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
009D EF                MOV     A,R7
009E 75F006            MOV     B,#06H
00A1 A4                MUL     AB
00A2 2400        E     ADD     A,#LOW Accel+01H
00A4 F582              MOV     DPL,A
00A6 E4                CLR     A
00A7 3400        E     ADDC    A,#HIGH Accel+01H
00A9 F583              MOV     DPH,A
00AB E0                MOVX    A,@DPTR
00AC FB                MOV     R3,A
00AD 900000      R     MOV     DPTR,#tmp+01H
00B0 E0                MOVX    A,@DPTR
00B1 FE                MOV     R6,A
00B2 EB                MOV     A,R3
00B3 FF                MOV     R7,A
00B4 75F013            MOV     B,#013H
00B7 ED                MOV     A,R5
00B8 A4                MUL     AB
00B9 2400        E     ADD     A,#LOW g_imu+01H
00BB F582              MOV     DPL,A
00BD E5F0              MOV     A,B
00BF 3400        E     ADDC    A,#HIGH g_imu+01H
00C1 F583              MOV     DPH,A
00C3 EE                MOV     A,R6
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 13  

00C4 F0                MOVX    @DPTR,A
00C5 A3                INC     DPTR
00C6 EF                MOV     A,R7
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
00C8 900000      R     MOV     DPTR,#k_imu
00CB E0                MOVX    A,@DPTR
00CC FD                MOV     R5,A
00CD 2400        E     ADD     A,#LOW IMU_connected
00CF F582              MOV     DPL,A
00D1 E4                CLR     A
00D2 3400        E     ADDC    A,#HIGH IMU_connected
00D4 F583              MOV     DPH,A
00D6 E0                MOVX    A,@DPTR
00D7 FF                MOV     R7,A
00D8 75F006            MOV     B,#06H
00DB A4                MUL     AB
00DC 2400        E     ADD     A,#LOW Accel+02H
00DE F582              MOV     DPL,A
00E0 E4                CLR     A
00E1 3400        E     ADDC    A,#HIGH Accel+02H
00E3 F583              MOV     DPH,A
00E5 E0                MOVX    A,@DPTR
00E6 FB                MOV     R3,A
00E7 900000      R     MOV     DPTR,#tmp
00EA E4                CLR     A
00EB F0                MOVX    @DPTR,A
00EC A3                INC     DPTR
00ED EB                MOV     A,R3
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
00EF EF                MOV     A,R7
00F0 75F006            MOV     B,#06H
00F3 A4                MUL     AB
00F4 2400        E     ADD     A,#LOW Accel+03H
00F6 F582              MOV     DPL,A
00F8 E4                CLR     A
00F9 3400        E     ADDC    A,#HIGH Accel+03H
00FB F583              MOV     DPH,A
00FD E0                MOVX    A,@DPTR
00FE FB                MOV     R3,A
00FF 900000      R     MOV     DPTR,#tmp+01H
0102 E0                MOVX    A,@DPTR
0103 FE                MOV     R6,A
0104 EB                MOV     A,R3
0105 FF                MOV     R7,A
0106 75F013            MOV     B,#013H
0109 ED                MOV     A,R5
010A A4                MUL     AB
010B 2400        E     ADD     A,#LOW g_imu+03H
010D F582              MOV     DPL,A
010F E5F0              MOV     A,B
0111 3400        E     ADDC    A,#HIGH g_imu+03H
0113 F583              MOV     DPH,A
0115 EE                MOV     A,R6
0116 F0                MOVX    @DPTR,A
0117 A3                INC     DPTR
0118 EF                MOV     A,R7
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
011A 900000      R     MOV     DPTR,#k_imu
011D E0                MOVX    A,@DPTR
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 14  

011E FD                MOV     R5,A
011F 2400        E     ADD     A,#LOW IMU_connected
0121 F582              MOV     DPL,A
0123 E4                CLR     A
0124 3400        E     ADDC    A,#HIGH IMU_connected
0126 F583              MOV     DPH,A
0128 E0                MOVX    A,@DPTR
0129 FF                MOV     R7,A
012A 75F006            MOV     B,#06H
012D A4                MUL     AB
012E 2400        E     ADD     A,#LOW Accel+04H
0130 F582              MOV     DPL,A
0132 E4                CLR     A
0133 3400        E     ADDC    A,#HIGH Accel+04H
0135 F583              MOV     DPH,A
0137 E0                MOVX    A,@DPTR
0138 FB                MOV     R3,A
0139 900000      R     MOV     DPTR,#tmp
013C E4                CLR     A
013D F0                MOVX    @DPTR,A
013E A3                INC     DPTR
013F EB                MOV     A,R3
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
0141 EF                MOV     A,R7
0142 75F006            MOV     B,#06H
0145 A4                MUL     AB
0146 2400        E     ADD     A,#LOW Accel+05H
0148 F582              MOV     DPL,A
014A E4                CLR     A
014B 3400        E     ADDC    A,#HIGH Accel+05H
014D F583              MOV     DPH,A
014F E0                MOVX    A,@DPTR
0150 FB                MOV     R3,A
0151 900000      R     MOV     DPTR,#tmp+01H
0154 E0                MOVX    A,@DPTR
0155 FE                MOV     R6,A
0156 EB                MOV     A,R3
0157 FF                MOV     R7,A
0158 75F013            MOV     B,#013H
015B ED                MOV     A,R5
015C A4                MUL     AB
015D 2400        E     ADD     A,#LOW g_imu+05H
015F F582              MOV     DPL,A
0161 E5F0              MOV     A,B
0163 3400        E     ADDC    A,#HIGH g_imu+05H
0165 F583              MOV     DPH,A
0167 EE                MOV     A,R6
0168 F0                MOVX    @DPTR,A
0169 A3                INC     DPTR
016A EF                MOV     A,R7
016B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
016C 900000      R     MOV     DPTR,#k_imu
016F E0                MOVX    A,@DPTR
0170 FD                MOV     R5,A
0171 2400        E     ADD     A,#LOW IMU_connected
0173 F582              MOV     DPL,A
0175 E4                CLR     A
0176 3400        E     ADDC    A,#HIGH IMU_connected
0178 F583              MOV     DPH,A
017A E0                MOVX    A,@DPTR
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 15  

017B FF                MOV     R7,A
017C 75F006            MOV     B,#06H
017F A4                MUL     AB
0180 2400        E     ADD     A,#LOW Gyro
0182 F582              MOV     DPL,A
0184 E4                CLR     A
0185 3400        E     ADDC    A,#HIGH Gyro
0187 F583              MOV     DPH,A
0189 E0                MOVX    A,@DPTR
018A FB                MOV     R3,A
018B 900000      R     MOV     DPTR,#tmp
018E E4                CLR     A
018F F0                MOVX    @DPTR,A
0190 A3                INC     DPTR
0191 EB                MOV     A,R3
0192 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
0193 EF                MOV     A,R7
0194 75F006            MOV     B,#06H
0197 A4                MUL     AB
0198 2400        E     ADD     A,#LOW Gyro+01H
019A F582              MOV     DPL,A
019C E4                CLR     A
019D 3400        E     ADDC    A,#HIGH Gyro+01H
019F F583              MOV     DPH,A
01A1 E0                MOVX    A,@DPTR
01A2 FB                MOV     R3,A
01A3 900000      R     MOV     DPTR,#tmp+01H
01A6 E0                MOVX    A,@DPTR
01A7 FE                MOV     R6,A
01A8 EB                MOV     A,R3
01A9 FF                MOV     R7,A
01AA 75F013            MOV     B,#013H
01AD ED                MOV     A,R5
01AE A4                MUL     AB
01AF 2400        E     ADD     A,#LOW g_imu+07H
01B1 F582              MOV     DPL,A
01B3 E5F0              MOV     A,B
01B5 3400        E     ADDC    A,#HIGH g_imu+07H
01B7 F583              MOV     DPH,A
01B9 EE                MOV     A,R6
01BA F0                MOVX    @DPTR,A
01BB A3                INC     DPTR
01BC EF                MOV     A,R7
01BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
01BE 900000      R     MOV     DPTR,#k_imu
01C1 E0                MOVX    A,@DPTR
01C2 FD                MOV     R5,A
01C3 2400        E     ADD     A,#LOW IMU_connected
01C5 F582              MOV     DPL,A
01C7 E4                CLR     A
01C8 3400        E     ADDC    A,#HIGH IMU_connected
01CA F583              MOV     DPH,A
01CC E0                MOVX    A,@DPTR
01CD FF                MOV     R7,A
01CE 75F006            MOV     B,#06H
01D1 A4                MUL     AB
01D2 2400        E     ADD     A,#LOW Gyro+02H
01D4 F582              MOV     DPL,A
01D6 E4                CLR     A
01D7 3400        E     ADDC    A,#HIGH Gyro+02H
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 16  

01D9 F583              MOV     DPH,A
01DB E0                MOVX    A,@DPTR
01DC FB                MOV     R3,A
01DD 900000      R     MOV     DPTR,#tmp
01E0 E4                CLR     A
01E1 F0                MOVX    @DPTR,A
01E2 A3                INC     DPTR
01E3 EB                MOV     A,R3
01E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
01E5 EF                MOV     A,R7
01E6 75F006            MOV     B,#06H
01E9 A4                MUL     AB
01EA 2400        E     ADD     A,#LOW Gyro+03H
01EC F582              MOV     DPL,A
01EE E4                CLR     A
01EF 3400        E     ADDC    A,#HIGH Gyro+03H
01F1 F583              MOV     DPH,A
01F3 E0                MOVX    A,@DPTR
01F4 FB                MOV     R3,A
01F5 900000      R     MOV     DPTR,#tmp+01H
01F8 E0                MOVX    A,@DPTR
01F9 FE                MOV     R6,A
01FA EB                MOV     A,R3
01FB FF                MOV     R7,A
01FC 75F013            MOV     B,#013H
01FF ED                MOV     A,R5
0200 A4                MUL     AB
0201 2400        E     ADD     A,#LOW g_imu+09H
0203 F582              MOV     DPL,A
0205 E5F0              MOV     A,B
0207 3400        E     ADDC    A,#HIGH g_imu+09H
0209 F583              MOV     DPH,A
020B EE                MOV     A,R6
020C F0                MOVX    @DPTR,A
020D A3                INC     DPTR
020E EF                MOV     A,R7
020F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
0210 900000      R     MOV     DPTR,#k_imu
0213 E0                MOVX    A,@DPTR
0214 FD                MOV     R5,A
0215 2400        E     ADD     A,#LOW IMU_connected
0217 F582              MOV     DPL,A
0219 E4                CLR     A
021A 3400        E     ADDC    A,#HIGH IMU_connected
021C F583              MOV     DPH,A
021E E0                MOVX    A,@DPTR
021F FF                MOV     R7,A
0220 75F006            MOV     B,#06H
0223 A4                MUL     AB
0224 2400        E     ADD     A,#LOW Gyro+04H
0226 F582              MOV     DPL,A
0228 E4                CLR     A
0229 3400        E     ADDC    A,#HIGH Gyro+04H
022B F583              MOV     DPH,A
022D E0                MOVX    A,@DPTR
022E FB                MOV     R3,A
022F 900000      R     MOV     DPTR,#tmp
0232 E4                CLR     A
0233 F0                MOVX    @DPTR,A
0234 A3                INC     DPTR
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 17  

0235 EB                MOV     A,R3
0236 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
0237 EF                MOV     A,R7
0238 75F006            MOV     B,#06H
023B A4                MUL     AB
023C 2400        E     ADD     A,#LOW Gyro+05H
023E F582              MOV     DPL,A
0240 E4                CLR     A
0241 3400        E     ADDC    A,#HIGH Gyro+05H
0243 F583              MOV     DPH,A
0245 E0                MOVX    A,@DPTR
0246 FB                MOV     R3,A
0247 900000      R     MOV     DPTR,#tmp+01H
024A E0                MOVX    A,@DPTR
024B FE                MOV     R6,A
024C EB                MOV     A,R3
024D FF                MOV     R7,A
024E 75F013            MOV     B,#013H
0251 ED                MOV     A,R5
0252 A4                MUL     AB
0253 2400        E     ADD     A,#LOW g_imu+0BH
0255 F582              MOV     DPL,A
0257 E5F0              MOV     A,B
0259 3400        E     ADDC    A,#HIGH g_imu+0BH
025B F583              MOV     DPH,A
025D EE                MOV     A,R6
025E F0                MOVX    @DPTR,A
025F A3                INC     DPTR
0260 EF                MOV     A,R7
0261 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0262 900000      R     MOV     DPTR,#k_imu
0265 E0                MOVX    A,@DPTR
0266 FD                MOV     R5,A
0267 2400        E     ADD     A,#LOW IMU_connected
0269 F582              MOV     DPL,A
026B E4                CLR     A
026C 3400        E     ADDC    A,#HIGH IMU_connected
026E F583              MOV     DPH,A
0270 E0                MOVX    A,@DPTR
0271 FF                MOV     R7,A
0272 75F006            MOV     B,#06H
0275 A4                MUL     AB
0276 2400        E     ADD     A,#LOW Mag
0278 F582              MOV     DPL,A
027A E4                CLR     A
027B 3400        E     ADDC    A,#HIGH Mag
027D F583              MOV     DPH,A
027F E0                MOVX    A,@DPTR
0280 FB                MOV     R3,A
0281 900000      R     MOV     DPTR,#tmp
0284 E4                CLR     A
0285 F0                MOVX    @DPTR,A
0286 A3                INC     DPTR
0287 EB                MOV     A,R3
0288 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
0289 EF                MOV     A,R7
028A 75F006            MOV     B,#06H
028D A4                MUL     AB
028E 2400        E     ADD     A,#LOW Mag+01H
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 18  

0290 F582              MOV     DPL,A
0292 E4                CLR     A
0293 3400        E     ADDC    A,#HIGH Mag+01H
0295 F583              MOV     DPH,A
0297 E0                MOVX    A,@DPTR
0298 FB                MOV     R3,A
0299 900000      R     MOV     DPTR,#tmp+01H
029C E0                MOVX    A,@DPTR
029D FE                MOV     R6,A
029E EB                MOV     A,R3
029F FF                MOV     R7,A
02A0 75F013            MOV     B,#013H
02A3 ED                MOV     A,R5
02A4 A4                MUL     AB
02A5 2400        E     ADD     A,#LOW g_imu+0DH
02A7 F582              MOV     DPL,A
02A9 E5F0              MOV     A,B
02AB 3400        E     ADDC    A,#HIGH g_imu+0DH
02AD F583              MOV     DPH,A
02AF EE                MOV     A,R6
02B0 F0                MOVX    @DPTR,A
02B1 A3                INC     DPTR
02B2 EF                MOV     A,R7
02B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
02B4 900000      R     MOV     DPTR,#k_imu
02B7 E0                MOVX    A,@DPTR
02B8 FD                MOV     R5,A
02B9 2400        E     ADD     A,#LOW IMU_connected
02BB F582              MOV     DPL,A
02BD E4                CLR     A
02BE 3400        E     ADDC    A,#HIGH IMU_connected
02C0 F583              MOV     DPH,A
02C2 E0                MOVX    A,@DPTR
02C3 FF                MOV     R7,A
02C4 75F006            MOV     B,#06H
02C7 A4                MUL     AB
02C8 2400        E     ADD     A,#LOW Mag+02H
02CA F582              MOV     DPL,A
02CC E4                CLR     A
02CD 3400        E     ADDC    A,#HIGH Mag+02H
02CF F583              MOV     DPH,A
02D1 E0                MOVX    A,@DPTR
02D2 FB                MOV     R3,A
02D3 900000      R     MOV     DPTR,#tmp
02D6 E4                CLR     A
02D7 F0                MOVX    @DPTR,A
02D8 A3                INC     DPTR
02D9 EB                MOV     A,R3
02DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
02DB EF                MOV     A,R7
02DC 75F006            MOV     B,#06H
02DF A4                MUL     AB
02E0 2400        E     ADD     A,#LOW Mag+03H
02E2 F582              MOV     DPL,A
02E4 E4                CLR     A
02E5 3400        E     ADDC    A,#HIGH Mag+03H
02E7 F583              MOV     DPH,A
02E9 E0                MOVX    A,@DPTR
02EA FB                MOV     R3,A
02EB 900000      R     MOV     DPTR,#tmp+01H
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 19  

02EE E0                MOVX    A,@DPTR
02EF FE                MOV     R6,A
02F0 EB                MOV     A,R3
02F1 FF                MOV     R7,A
02F2 75F013            MOV     B,#013H
02F5 ED                MOV     A,R5
02F6 A4                MUL     AB
02F7 2400        E     ADD     A,#LOW g_imu+0FH
02F9 F582              MOV     DPL,A
02FB E5F0              MOV     A,B
02FD 3400        E     ADDC    A,#HIGH g_imu+0FH
02FF F583              MOV     DPH,A
0301 EE                MOV     A,R6
0302 F0                MOVX    @DPTR,A
0303 A3                INC     DPTR
0304 EF                MOV     A,R7
0305 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
0306 900000      R     MOV     DPTR,#k_imu
0309 E0                MOVX    A,@DPTR
030A FD                MOV     R5,A
030B 2400        E     ADD     A,#LOW IMU_connected
030D F582              MOV     DPL,A
030F E4                CLR     A
0310 3400        E     ADDC    A,#HIGH IMU_connected
0312 F583              MOV     DPH,A
0314 E0                MOVX    A,@DPTR
0315 FF                MOV     R7,A
0316 75F006            MOV     B,#06H
0319 A4                MUL     AB
031A 2400        E     ADD     A,#LOW Mag+04H
031C F582              MOV     DPL,A
031E E4                CLR     A
031F 3400        E     ADDC    A,#HIGH Mag+04H
0321 F583              MOV     DPH,A
0323 E0                MOVX    A,@DPTR
0324 FB                MOV     R3,A
0325 900000      R     MOV     DPTR,#tmp
0328 E4                CLR     A
0329 F0                MOVX    @DPTR,A
032A A3                INC     DPTR
032B EB                MOV     A,R3
032C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
032D EF                MOV     A,R7
032E 75F006            MOV     B,#06H
0331 A4                MUL     AB
0332 2400        E     ADD     A,#LOW Mag+05H
0334 F582              MOV     DPL,A
0336 E4                CLR     A
0337 3400        E     ADDC    A,#HIGH Mag+05H
0339 F583              MOV     DPH,A
033B E0                MOVX    A,@DPTR
033C FB                MOV     R3,A
033D 900000      R     MOV     DPTR,#tmp+01H
0340 E0                MOVX    A,@DPTR
0341 FE                MOV     R6,A
0342 EB                MOV     A,R3
0343 FF                MOV     R7,A
0344 75F013            MOV     B,#013H
0347 ED                MOV     A,R5
0348 A4                MUL     AB
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 20  

0349 2400        E     ADD     A,#LOW g_imu+011H
034B F582              MOV     DPL,A
034D E5F0              MOV     A,B
034F 3400        E     ADDC    A,#HIGH g_imu+011H
0351 F583              MOV     DPH,A
0353 EE                MOV     A,R6
0354 F0                MOVX    @DPTR,A
0355 A3                INC     DPTR
0356 EF                MOV     A,R7
0357 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
0358 900000      R     MOV     DPTR,#k_imu
035B E0                MOVX    A,@DPTR
035C 04                INC     A
035D F0                MOVX    @DPTR,A
035E 020000      R     LJMP    ?C0004
0361         ?C0005:
                                           ; SOURCE LINE # 213
0361 900000      E     MOV     DPTR,#imu_send_flag
0364 E0                MOVX    A,@DPTR
0365 6401              XRL     A,#01H
0367 6003              JZ      $ + 5H
0369 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 215
036C 900000      R     MOV     DPTR,#packet_data
036F 7495              MOV     A,#095H
0371 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0372 900000      R     MOV     DPTR,#k_imu
0375 E4                CLR     A
0376 F0                MOVX    @DPTR,A
0377         ?C0008:
0377 900000      E     MOV     DPTR,#N_IMU_Connected
037A E0                MOVX    A,@DPTR
037B FF                MOV     R7,A
037C 900000      R     MOV     DPTR,#k_imu
037F E0                MOVX    A,@DPTR
0380 FE                MOV     R6,A
0381 C3                CLR     C
0382 9F                SUBB    A,R7
0383 4003              JC      $ + 5H
0385 020000      R     LJMP    ?C0009
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 220
0388 900000      R     MOV     DPTR,#single_packet
038B 743A              MOV     A,#03AH
038D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
038E 7400        E     MOV     A,#LOW IMU_connected
0390 2E                ADD     A,R6
0391 F582              MOV     DPL,A
0393 E4                CLR     A
0394 3400        E     ADDC    A,#HIGH IMU_connected
0396 F583              MOV     DPH,A
0398 E0                MOVX    A,@DPTR
0399 75F003            MOV     B,#03H
039C A4                MUL     AB
039D 2400        E     ADD     A,#LOW IMU_conf
039F F582              MOV     DPL,A
03A1 E4                CLR     A
03A2 3400        E     ADDC    A,#HIGH IMU_conf
03A4 F583              MOV     DPH,A
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 21  

03A6 E0                MOVX    A,@DPTR
03A7 607B              JZ      ?C0011
                                           ; SOURCE LINE # 222
03A9 900000      R     MOV     DPTR,#k_imu
03AC E0                MOVX    A,@DPTR
03AD FF                MOV     R7,A
03AE 75F013            MOV     B,#013H
03B1 A4                MUL     AB
03B2 2400        E     ADD     A,#LOW g_imu+01H
03B4 F582              MOV     DPL,A
03B6 E5F0              MOV     A,B
03B8 3400        E     ADDC    A,#HIGH g_imu+01H
03BA F583              MOV     DPH,A
03BC E0                MOVX    A,@DPTR
03BD FC                MOV     R4,A
03BE A3                INC     DPTR
03BF E0                MOVX    A,@DPTR
03C0 FD                MOV     R5,A
03C1 900000      R     MOV     DPTR,#c
03C4 E0                MOVX    A,@DPTR
03C5 FE                MOV     R6,A
03C6 2400        R     ADD     A,#LOW single_packet
03C8 F582              MOV     DPL,A
03CA E4                CLR     A
03CB 3400        R     ADDC    A,#HIGH single_packet
03CD F583              MOV     DPH,A
03CF EC                MOV     A,R4
03D0 F0                MOVX    @DPTR,A
03D1 A3                INC     DPTR
03D2 ED                MOV     A,R5
03D3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 223
03D4 75F013            MOV     B,#013H
03D7 EF                MOV     A,R7
03D8 A4                MUL     AB
03D9 2400        E     ADD     A,#LOW g_imu+03H
03DB F582              MOV     DPL,A
03DD E5F0              MOV     A,B
03DF 3400        E     ADDC    A,#HIGH g_imu+03H
03E1 F583              MOV     DPH,A
03E3 E0                MOVX    A,@DPTR
03E4 FC                MOV     R4,A
03E5 A3                INC     DPTR
03E6 E0                MOVX    A,@DPTR
03E7 FD                MOV     R5,A
03E8 7400        R     MOV     A,#LOW single_packet+02H
03EA 2E                ADD     A,R6
03EB F582              MOV     DPL,A
03ED E4                CLR     A
03EE 3400        R     ADDC    A,#HIGH single_packet+02H
03F0 F583              MOV     DPH,A
03F2 EC                MOV     A,R4
03F3 F0                MOVX    @DPTR,A
03F4 A3                INC     DPTR
03F5 ED                MOV     A,R5
03F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 224
03F7 900000      R     MOV     DPTR,#k_imu
03FA E0                MOVX    A,@DPTR
03FB 75F013            MOV     B,#013H
03FE A4                MUL     AB
03FF 2400        E     ADD     A,#LOW g_imu+05H
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 22  

0401 F582              MOV     DPL,A
0403 E5F0              MOV     A,B
0405 3400        E     ADDC    A,#HIGH g_imu+05H
0407 F583              MOV     DPH,A
0409 E0                MOVX    A,@DPTR
040A FC                MOV     R4,A
040B A3                INC     DPTR
040C E0                MOVX    A,@DPTR
040D FD                MOV     R5,A
040E 7400        R     MOV     A,#LOW single_packet+04H
0410 2E                ADD     A,R6
0411 F582              MOV     DPL,A
0413 E4                CLR     A
0414 3400        R     ADDC    A,#HIGH single_packet+04H
0416 F583              MOV     DPH,A
0418 EC                MOV     A,R4
0419 F0                MOVX    @DPTR,A
041A A3                INC     DPTR
041B ED                MOV     A,R5
041C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 225
041D 900000      R     MOV     DPTR,#c
0420 E0                MOVX    A,@DPTR
0421 2406              ADD     A,#06H
0423 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
0424         ?C0011:
                                           ; SOURCE LINE # 227
0424 900000      R     MOV     DPTR,#k_imu
0427 E0                MOVX    A,@DPTR
0428 FF                MOV     R7,A
0429 2400        E     ADD     A,#LOW IMU_connected
042B F582              MOV     DPL,A
042D E4                CLR     A
042E 3400        E     ADDC    A,#HIGH IMU_connected
0430 F583              MOV     DPH,A
0432 E0                MOVX    A,@DPTR
0433 75F003            MOV     B,#03H
0436 A4                MUL     AB
0437 2400        E     ADD     A,#LOW IMU_conf+01H
0439 F582              MOV     DPL,A
043B E4                CLR     A
043C 3400        E     ADDC    A,#HIGH IMU_conf+01H
043E F583              MOV     DPH,A
0440 E0                MOVX    A,@DPTR
0441 6078              JZ      ?C0012
                                           ; SOURCE LINE # 228
0443 900000      R     MOV     DPTR,#k_imu
0446 E0                MOVX    A,@DPTR
0447 FE                MOV     R6,A
0448 75F013            MOV     B,#013H
044B A4                MUL     AB
044C 2400        E     ADD     A,#LOW g_imu+07H
044E F582              MOV     DPL,A
0450 E5F0              MOV     A,B
0452 3400        E     ADDC    A,#HIGH g_imu+07H
0454 F583              MOV     DPH,A
0456 E0                MOVX    A,@DPTR
0457 FC                MOV     R4,A
0458 A3                INC     DPTR
0459 E0                MOVX    A,@DPTR
045A FD                MOV     R5,A
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 23  

045B 900000      R     MOV     DPTR,#c
045E E0                MOVX    A,@DPTR
045F FB                MOV     R3,A
0460 2400        R     ADD     A,#LOW single_packet
0462 F582              MOV     DPL,A
0464 E4                CLR     A
0465 3400        R     ADDC    A,#HIGH single_packet
0467 F583              MOV     DPH,A
0469 EC                MOV     A,R4
046A F0                MOVX    @DPTR,A
046B A3                INC     DPTR
046C ED                MOV     A,R5
046D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
046E 75F013            MOV     B,#013H
0471 EE                MOV     A,R6
0472 A4                MUL     AB
0473 2400        E     ADD     A,#LOW g_imu+09H
0475 F582              MOV     DPL,A
0477 E5F0              MOV     A,B
0479 3400        E     ADDC    A,#HIGH g_imu+09H
047B F583              MOV     DPH,A
047D E0                MOVX    A,@DPTR
047E FC                MOV     R4,A
047F A3                INC     DPTR
0480 E0                MOVX    A,@DPTR
0481 FD                MOV     R5,A
0482 7400        R     MOV     A,#LOW single_packet+02H
0484 2B                ADD     A,R3
0485 F582              MOV     DPL,A
0487 E4                CLR     A
0488 3400        R     ADDC    A,#HIGH single_packet+02H
048A F583              MOV     DPH,A
048C EC                MOV     A,R4
048D F0                MOVX    @DPTR,A
048E A3                INC     DPTR
048F ED                MOV     A,R5
0490 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
0491 75F013            MOV     B,#013H
0494 EF                MOV     A,R7
0495 A4                MUL     AB
0496 2400        E     ADD     A,#LOW g_imu+0BH
0498 F582              MOV     DPL,A
049A E5F0              MOV     A,B
049C 3400        E     ADDC    A,#HIGH g_imu+0BH
049E F583              MOV     DPH,A
04A0 E0                MOVX    A,@DPTR
04A1 FE                MOV     R6,A
04A2 A3                INC     DPTR
04A3 E0                MOVX    A,@DPTR
04A4 FF                MOV     R7,A
04A5 7400        R     MOV     A,#LOW single_packet+04H
04A7 2B                ADD     A,R3
04A8 F582              MOV     DPL,A
04AA E4                CLR     A
04AB 3400        R     ADDC    A,#HIGH single_packet+04H
04AD F583              MOV     DPH,A
04AF EE                MOV     A,R6
04B0 F0                MOVX    @DPTR,A
04B1 A3                INC     DPTR
04B2 EF                MOV     A,R7
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 24  

04B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
04B4 900000      R     MOV     DPTR,#c
04B7 E0                MOVX    A,@DPTR
04B8 2406              ADD     A,#06H
04BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 232
04BB         ?C0012:
                                           ; SOURCE LINE # 233
04BB 900000      R     MOV     DPTR,#k_imu
04BE E0                MOVX    A,@DPTR
04BF FF                MOV     R7,A
04C0 2400        E     ADD     A,#LOW IMU_connected
04C2 F582              MOV     DPL,A
04C4 E4                CLR     A
04C5 3400        E     ADDC    A,#HIGH IMU_connected
04C7 F583              MOV     DPH,A
04C9 E0                MOVX    A,@DPTR
04CA 75F003            MOV     B,#03H
04CD A4                MUL     AB
04CE 2400        E     ADD     A,#LOW IMU_conf+02H
04D0 F582              MOV     DPL,A
04D2 E4                CLR     A
04D3 3400        E     ADDC    A,#HIGH IMU_conf+02H
04D5 F583              MOV     DPH,A
04D7 E0                MOVX    A,@DPTR
04D8 6078              JZ      ?C0013
                                           ; SOURCE LINE # 234
04DA 900000      R     MOV     DPTR,#k_imu
04DD E0                MOVX    A,@DPTR
04DE FE                MOV     R6,A
04DF 75F013            MOV     B,#013H
04E2 A4                MUL     AB
04E3 2400        E     ADD     A,#LOW g_imu+0DH
04E5 F582              MOV     DPL,A
04E7 E5F0              MOV     A,B
04E9 3400        E     ADDC    A,#HIGH g_imu+0DH
04EB F583              MOV     DPH,A
04ED E0                MOVX    A,@DPTR
04EE FC                MOV     R4,A
04EF A3                INC     DPTR
04F0 E0                MOVX    A,@DPTR
04F1 FD                MOV     R5,A
04F2 900000      R     MOV     DPTR,#c
04F5 E0                MOVX    A,@DPTR
04F6 FB                MOV     R3,A
04F7 2400        R     ADD     A,#LOW single_packet
04F9 F582              MOV     DPL,A
04FB E4                CLR     A
04FC 3400        R     ADDC    A,#HIGH single_packet
04FE F583              MOV     DPH,A
0500 EC                MOV     A,R4
0501 F0                MOVX    @DPTR,A
0502 A3                INC     DPTR
0503 ED                MOV     A,R5
0504 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 235
0505 75F013            MOV     B,#013H
0508 EE                MOV     A,R6
0509 A4                MUL     AB
050A 2400        E     ADD     A,#LOW g_imu+0FH
050C F582              MOV     DPL,A
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 25  

050E E5F0              MOV     A,B
0510 3400        E     ADDC    A,#HIGH g_imu+0FH
0512 F583              MOV     DPH,A
0514 E0                MOVX    A,@DPTR
0515 FC                MOV     R4,A
0516 A3                INC     DPTR
0517 E0                MOVX    A,@DPTR
0518 FD                MOV     R5,A
0519 7400        R     MOV     A,#LOW single_packet+02H
051B 2B                ADD     A,R3
051C F582              MOV     DPL,A
051E E4                CLR     A
051F 3400        R     ADDC    A,#HIGH single_packet+02H
0521 F583              MOV     DPH,A
0523 EC                MOV     A,R4
0524 F0                MOVX    @DPTR,A
0525 A3                INC     DPTR
0526 ED                MOV     A,R5
0527 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
0528 75F013            MOV     B,#013H
052B EF                MOV     A,R7
052C A4                MUL     AB
052D 2400        E     ADD     A,#LOW g_imu+011H
052F F582              MOV     DPL,A
0531 E5F0              MOV     A,B
0533 3400        E     ADDC    A,#HIGH g_imu+011H
0535 F583              MOV     DPH,A
0537 E0                MOVX    A,@DPTR
0538 FE                MOV     R6,A
0539 A3                INC     DPTR
053A E0                MOVX    A,@DPTR
053B FF                MOV     R7,A
053C 7400        R     MOV     A,#LOW single_packet+04H
053E 2B                ADD     A,R3
053F F582              MOV     DPL,A
0541 E4                CLR     A
0542 3400        R     ADDC    A,#HIGH single_packet+04H
0544 F583              MOV     DPH,A
0546 EE                MOV     A,R6
0547 F0                MOVX    @DPTR,A
0548 A3                INC     DPTR
0549 EF                MOV     A,R7
054A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
054B 900000      R     MOV     DPTR,#c
054E E0                MOVX    A,@DPTR
054F 2406              ADD     A,#06H
0551 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 238
0552         ?C0013:
                                           ; SOURCE LINE # 239
0552 900000      R     MOV     DPTR,#k_imu
0555 E0                MOVX    A,@DPTR
0556 2400        E     ADD     A,#LOW IMU_connected
0558 F582              MOV     DPL,A
055A E4                CLR     A
055B 3400        E     ADDC    A,#HIGH IMU_connected
055D F583              MOV     DPH,A
055F E0                MOVX    A,@DPTR
0560 25E0              ADD     A,ACC
0562 2400        E     ADD     A,#LOW single_imu_size
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 26  

0564 F582              MOV     DPL,A
0566 E4                CLR     A
0567 3400        E     ADDC    A,#HIGH single_imu_size
0569 F583              MOV     DPH,A
056B E0                MOVX    A,@DPTR
056C FE                MOV     R6,A
056D A3                INC     DPTR
056E E0                MOVX    A,@DPTR
056F 2400        R     ADD     A,#LOW single_packet+0FFFFH
0571 F582              MOV     DPL,A
0573 7400        R     MOV     A,#HIGH single_packet+0FFFFH
0575 3E                ADDC    A,R6
0576 F583              MOV     DPH,A
0578 743A              MOV     A,#03AH
057A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
057B 900000      R     MOV     DPTR,#c
057E 7401              MOV     A,#01H
0580 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
0581 A3                INC     DPTR
0582 E4                CLR     A
0583 F0                MOVX    @DPTR,A
0584         ?C0014:
0584 900000      R     MOV     DPTR,#k_imu
0587 E0                MOVX    A,@DPTR
0588 2400        E     ADD     A,#LOW IMU_connected
058A F582              MOV     DPL,A
058C E4                CLR     A
058D 3400        E     ADDC    A,#HIGH IMU_connected
058F F583              MOV     DPH,A
0591 E0                MOVX    A,@DPTR
0592 F9                MOV     R1,A
0593 25E0              ADD     A,ACC
0595 2400        E     ADD     A,#LOW single_imu_size
0597 F582              MOV     DPL,A
0599 E4                CLR     A
059A 3400        E     ADDC    A,#HIGH single_imu_size
059C F583              MOV     DPH,A
059E E0                MOVX    A,@DPTR
059F FE                MOV     R6,A
05A0 A3                INC     DPTR
05A1 E0                MOVX    A,@DPTR
05A2 FF                MOV     R7,A
05A3 900000      R     MOV     DPTR,#k
05A6 E0                MOVX    A,@DPTR
05A7 FD                MOV     R5,A
05A8 D3                SETB    C
05A9 EF                MOV     A,R7
05AA 9D                SUBB    A,R5
05AB 7480              MOV     A,#080H
05AD F8                MOV     R0,A
05AE EE                MOV     A,R6
05AF 6480              XRL     A,#080H
05B1 98                SUBB    A,R0
05B2 402B              JC      ?C0015
                                           ; SOURCE LINE # 244
05B4 E0                MOVX    A,@DPTR
05B5 FF                MOV     R7,A
05B6 2400        R     ADD     A,#LOW single_packet
05B8 F582              MOV     DPL,A
05BA E4                CLR     A
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 27  

05BB 3400        R     ADDC    A,#HIGH single_packet
05BD F583              MOV     DPH,A
05BF E0                MOVX    A,@DPTR
05C0 FE                MOV     R6,A
05C1 EF                MOV     A,R7
05C2 900000      R     MOV     DPTR,#gl_c
05C5 E0                MOVX    A,@DPTR
05C6 2D                ADD     A,R5
05C7 FD                MOV     R5,A
05C8 E4                CLR     A
05C9 33                RLC     A
05CA FC                MOV     R4,A
05CB 7400        R     MOV     A,#LOW packet_data
05CD 2D                ADD     A,R5
05CE F582              MOV     DPL,A
05D0 7400        R     MOV     A,#HIGH packet_data
05D2 3C                ADDC    A,R4
05D3 F583              MOV     DPH,A
05D5 EE                MOV     A,R6
05D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
05D7 900000      R     MOV     DPTR,#k
05DA E0                MOVX    A,@DPTR
05DB 04                INC     A
05DC F0                MOVX    @DPTR,A
05DD 80A5              SJMP    ?C0014
05DF         ?C0015:
                                           ; SOURCE LINE # 246
05DF E9                MOV     A,R1
05E0 25E0              ADD     A,ACC
05E2 2400        E     ADD     A,#LOW single_imu_size
05E4 F582              MOV     DPL,A
05E6 E4                CLR     A
05E7 3400        E     ADDC    A,#HIGH single_imu_size
05E9 F583              MOV     DPH,A
05EB E0                MOVX    A,@DPTR
05EC A3                INC     DPTR
05ED E0                MOVX    A,@DPTR
05EE FF                MOV     R7,A
05EF 900000      R     MOV     DPTR,#gl_c
05F2 E0                MOVX    A,@DPTR
05F3 2F                ADD     A,R7
05F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
05F5 7E00              MOV     R6,#00H
05F7 7F14              MOV     R7,#014H
05F9 7D00              MOV     R5,#00H
05FB 7B01              MOV     R3,#01H
05FD 7A00        R     MOV     R2,#HIGH single_packet
05FF 7900        R     MOV     R1,#LOW single_packet
0601 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 250
0604 900000      R     MOV     DPTR,#k_imu
0607 E0                MOVX    A,@DPTR
0608 04                INC     A
0609 F0                MOVX    @DPTR,A
060A 020000      R     LJMP    ?C0008
060D         ?C0009:
                                           ; SOURCE LINE # 253
060D 7B01              MOV     R3,#01H
060F 7A00        R     MOV     R2,#HIGH packet_data
0611 7900        R     MOV     R1,#LOW packet_data
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 28  

0613 900000      E     MOV     DPTR,#imus_data_size
0616 E0                MOVX    A,@DPTR
0617 A3                INC     DPTR
0618 E0                MOVX    A,@DPTR
0619 14                DEC     A
061A FD                MOV     R5,A
061B 120000      E     LCALL   _LCRChecksum
061E 900000      E     MOV     DPTR,#imus_data_size
0621 E0                MOVX    A,@DPTR
0622 FC                MOV     R4,A
0623 A3                INC     DPTR
0624 E0                MOVX    A,@DPTR
0625 FD                MOV     R5,A
0626 2400        R     ADD     A,#LOW packet_data+0FFFFH
0628 F582              MOV     DPL,A
062A 7400        R     MOV     A,#HIGH packet_data+0FFFFH
062C 3C                ADDC    A,R4
062D F583              MOV     DPH,A
062F EF                MOV     A,R7
0630 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
0631 7B01              MOV     R3,#01H
0633 7A00        R     MOV     R2,#HIGH packet_data
0635 7900        R     MOV     R1,#LOW packet_data
0637 120000      E     LCALL   _commWrite
                                           ; SOURCE LINE # 256
063A 900000      E     MOV     DPTR,#imu_send_flag
063D E4                CLR     A
063E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 267
063F         ?C0017:
063F D007              POP     AR7
0641 D006              POP     AR6
0643 D005              POP     AR5
0645 D004              POP     AR4
0647 D003              POP     AR3
0649 D002              POP     AR2
064B D001              POP     AR1
064D D000              POP     AR0
064F D0D0              POP     PSW
0651 D000        E     POP     ?C?XPAGE1SFR
0653 D086              POP     DPS
0655 D084              POP     DPL1
0657 D085              POP     DPH1
0659 D082              POP     DPL
065B D083              POP     DPH
065D D0F0              POP     B
065F D0E0              POP     ACC
0661 32                RETI    
             ; FUNCTION isr_imu_Interrupt (END)

             ; FUNCTION _isr_imu_SetVector (BEGIN)
                                           ; SOURCE LINE # 297
;---- Variable 'address' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7904              MOV     R1,#04H
0006 AD07              MOV     R5,AR7
0008 AC06              MOV     R4,AR6
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 29  

000A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 300
000D 22                RET     
             ; FUNCTION _isr_imu_SetVector (END)

             ; FUNCTION isr_imu_GetVector (BEGIN)
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7904              MOV     R1,#04H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 320
0009         ?C0019:
0009 22                RET     
             ; FUNCTION isr_imu_GetVector (END)

             ; FUNCTION _isr_imu_SetPriority (BEGIN)
                                           ; SOURCE LINE # 347
;---- Variable 'priority' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
0000 EF                MOV     A,R7
0001 C4                SWAP    A
0002 33                RLC     A
0003 54E0              ANL     A,#0E0H
0005 904482            MOV     DPTR,#04482H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 350
0009 22                RET     
             ; FUNCTION _isr_imu_SetPriority (END)

             ; FUNCTION isr_imu_GetPriority (BEGIN)
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 374
0000 904482            MOV     DPTR,#04482H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 C4                SWAP    A
0006 13                RRC     A
0007 5407              ANL     A,#07H
0009 FF                MOV     R7,A
;---- Variable 'priority' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
000A         ?C0021:
000A 22                RET     
             ; FUNCTION isr_imu_GetPriority (END)

             ; FUNCTION isr_imu_Enable (BEGIN)
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 397
                                           ; SOURCE LINE # 399
0000 9044C0            MOV     DPTR,#044C0H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
0006 22                RET     
             ; FUNCTION isr_imu_Enable (END)

C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 30  

             ; FUNCTION isr_imu_GetState (BEGIN)
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 420
0000 9044C0            MOV     DPTR,#044C0H
0003 E0                MOVX    A,@DPTR
0004 30E204            JNB     ACC.2,?C0023
0007 7F01              MOV     R7,#01H
0009 8002              SJMP    ?C0024
000B         ?C0023:
000B 7F00              MOV     R7,#00H
000D         ?C0024:
                                           ; SOURCE LINE # 421
000D         ?C0025:
000D 22                RET     
             ; FUNCTION isr_imu_GetState (END)

             ; FUNCTION isr_imu_Disable (BEGIN)
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 441
0000 9044C8            MOV     DPTR,#044C8H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
0006 22                RET     
             ; FUNCTION isr_imu_Disable (END)

             ; FUNCTION isr_imu_SetPending (BEGIN)
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 466
                                           ; SOURCE LINE # 467
0000 9044D0            MOV     DPTR,#044D0H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 468
0006 22                RET     
             ; FUNCTION isr_imu_SetPending (END)

             ; FUNCTION isr_imu_ClearPending (BEGIN)
                                           ; SOURCE LINE # 490
                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 492
0000 9044D8            MOV     DPTR,#044D8H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
0006 22                RET     
             ; FUNCTION isr_imu_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1775    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     378
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
C51 COMPILER V9.51   ISR_IMU                                                               09/26/2016 18:45:45 PAGE 31  

   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
